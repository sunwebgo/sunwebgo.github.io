<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第02章_变量和运算符</title>
    <link href="/2021/03/02/Java%E5%9F%BA%E7%A1%80-%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2021/03/02/Java%E5%9F%BA%E7%A1%80-%E7%AC%AC02%E7%AB%A0_%E5%8F%98%E9%87%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关键字（keyword）"><a href="#1-关键字（keyword）" class="headerlink" title="1. 关键字（keyword）"></a>1. 关键字（keyword）</h2><ul><li>定义：<strong>被Java语言赋予了特殊含义，用做专门用途的字符串（或单词）</strong><ul><li>HelloWorld案例中，出现的关键字有 <code>class</code>、<code>public </code>  、 <code>static</code> 、  <code>void</code>  等，这些单词已经被Java定义好了。<ul><li>特点：全部关键字都是<code>小写字母</code>。</li></ul></li></ul></li><li>关键字比较多，不需要死记硬背，学到哪里记到哪里即可。</li><li>官方地址： <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li></ul><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310234414849.png" alt="image-20220310234414849"></p><blockquote><p> 说明：</p><ol><li>关键字一共<code>50个</code>，其中<code>const</code>和<code>goto</code>是<code>保留字</code>(reserved word)。</li><li><code>true</code>，<code>false</code>，<code>null</code>不在其中，它们看起来像关键字，其实是字面量，表示特殊的布尔值和空值。</li></ol></blockquote><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310234557454.png" alt="image-20220310234557454" style="zoom: 67%;" /><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220801143635356.png" alt="image-20220801143635356" style="zoom:66%;" /><h2 id="2-标识符-identifier"><a href="#2-标识符-identifier" class="headerlink" title="2. 标识符( identifier)"></a>2. 标识符( identifier)</h2><p>Java中变量、方法、类等要素命名时使用的字符序列，称为标识符。</p><p>技巧：凡是自己可以起名字的地方都叫标识符。</p><p><strong>标识符的命名规则</strong>（必须遵守的<code>硬性规定</code>）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&gt; 由26个英文字母大小写，0-9 ，_或 $ 组成  &gt; 数字不可以开头。&gt; 不可以使用关键字和保留字，但能包含关键字和保留字。&gt; Java中严格区分大小写，长度无限制。&gt; 标识符不能包含空格。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>练习：miles、Test、a++、 –a、4#R、$4、 #44、apps、class、public、int、x、y、radius</p></blockquote><p><strong>标识符的命名规范</strong>（建议遵守的<code>软性要求</code>，否则工作时容易被鄙视）:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&gt; 包名：多单词组成时所有字母都小写：xxxyyyzzz。  例如：java.lang、com.atguigu.bean  &gt; 类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz  例如：HelloWorld，String，System等  &gt; 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz  例如：age,name,bookName,main,binarySearch,getName  &gt; 常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ  例如：MAX_VALUE,PI,DEFAULT_CAPACITY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</p><blockquote><p>更多细节详见《代码整洁之道_关于标识符.txt》《阿里巴巴Java开发手册-1.7.1-黄山版》</p></blockquote><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><h3 id="3-1-为什么需要变量"><a href="#3-1-为什么需要变量" class="headerlink" title="3.1 为什么需要变量"></a>3.1 为什么需要变量</h3><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220513235020527.png" alt="image-20220513235020527"></p><p>一花一世界，如果把一个程序看做一个世界或一个社会的话，那么变量就是程序世界的花花草草、万事万物。即，<strong>变量是程序中不可或缺的组成单位，最基本的存储单元</strong>。</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220513235828042.png" alt="image-20220513235828042"></p><h3 id="3-2-初识变量"><a href="#3-2-初识变量" class="headerlink" title="3.2 初识变量"></a>3.2 初识变量</h3><ul><li><p>变量的概念：</p><ul><li><p>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</p></li><li><p>变量的构成包含三个要素：<code>数据类型</code>、<code>变量名</code>、<code>存储的值</code></p></li><li><p>Java中变量声明的格式：<code>数据类型 变量名 = 变量值</code></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220311000744867.png" alt="image-20220311000744867" style="zoom:67%;" /></li></ul></li><li><p>变量的作用：用于在内存中保存数据。</p></li><li><p>使用变量注意：</p><ul><li>Java中每个变量必须先声明，后使用。</li><li>使用变量名来访问这块区域的数据。</li><li>变量的作用域：其定义所在的一对{ }内。</li><li>变量只有在其<code>作用域</code>内才有效。出了作用域，变量不可以再被调用。</li><li>同一个作用域内，不能定义重名的变量。</li></ul></li></ul><h3 id="3-3-Java中变量的数据类型"><a href="#3-3-Java中变量的数据类型" class="headerlink" title="3.3 Java中变量的数据类型"></a>3.3 Java中变量的数据类型</h3><p>Java中变量的数据类型分为两大类：</p><ul><li><p><strong>基本数据类型</strong>：包括 <code>整数类型</code>、<code>浮点数类型</code>、<code>字符类型</code>、<code>布尔类型</code>。</p></li><li><p><strong>引用数据类型</strong>：包括<code>数组</code>、 <code>类</code>、<code>接口</code>、<code>枚举</code>、<code>注解</code>、<code>记录</code>。</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/Java%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="Java的数据类型"></p></li></ul><h3 id="3-4-变量的使用"><a href="#3-4-变量的使用" class="headerlink" title="3.4 变量的使用"></a>3.4 变量的使用</h3><h4 id="3-4-1-步骤1：变量的声明"><a href="#3-4-1-步骤1：变量的声明" class="headerlink" title="3.4.1 步骤1：变量的声明"></a>3.4.1 步骤1：变量的声明</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">格式：数据类型  变量名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例如：</span><span class="token comment">//存储一个整数类型的年龄</span><span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">//存储一个小数类型的体重</span><span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token comment">//存储一个单字符类型的性别 </span><span class="token keyword">char</span> gender<span class="token punctuation">;</span><span class="token comment">//存储一个布尔类型的婚姻状态</span><span class="token keyword">boolean</span> marry<span class="token punctuation">;</span><span class="token comment">//存储一个字符串类型的姓名</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//声明多个同类型的变量</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span> <span class="token comment">//表示a,b,c三个变量都是int类型。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>注意：变量的数据类型可以是基本数据类型，也可以是引用数据类型。</p></blockquote><h4 id="3-4-2-步骤2：变量的赋值"><a href="#3-4-2-步骤2：变量的赋值" class="headerlink" title="3.4.2 步骤2：变量的赋值"></a>3.4.2 步骤2：变量的赋值</h4><p>给变量赋值，就是把“值”存到该变量代表的内存空间中。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</p><p><strong>变量赋值的语法格式：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>举例1：可以使用合适类型的<code>常量值</code>给已经声明的变量赋值</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>weight <span class="token operator">=</span> <span class="token number">109</span><span class="token punctuation">;</span>gender <span class="token operator">=</span> <span class="token char">'女'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>举例2：可以使用其他<code>变量</code>或者<code>表达式</code>给变量赋值</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>3：变量可以反复赋值</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//先声明，后初始化</span><span class="token keyword">char</span> gender<span class="token punctuation">;</span>gender <span class="token operator">=</span> <span class="token char">'女'</span><span class="token punctuation">;</span><span class="token comment">//给变量重新赋值，修改gender变量的值</span>gender <span class="token operator">=</span> <span class="token char">'男'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"gender = "</span> <span class="token operator">+</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//gender = 男</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>举例4：也可以将变量的声明和赋值一并执行</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isBeauty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"迪丽热巴"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>内存结构如图：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220514152216148.png" alt="image-20220514152216148" style="zoom: 80%;" /><h2 id="4-基本数据类型介绍"><a href="#4-基本数据类型介绍" class="headerlink" title="4. 基本数据类型介绍"></a>4. 基本数据类型介绍</h2><h3 id="4-1-整数类型：byte、short、int、long"><a href="#4-1-整数类型：byte、short、int、long" class="headerlink" title="4.1 整数类型：byte、short、int、long"></a>4.1 整数类型：byte、short、int、long</h3><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220520111756274.png" alt="image-20220520111756274" style="zoom: 50%;" /><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证Java程序的可移植性。</li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220311001553945.png" alt="image-20220311001553945" style="zoom:80%;" /><ul><li><p>定义long类型的变量，赋值时需要以”<code>l</code>“或”<code>L</code>“作为后缀。</p></li><li><p>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long。</p></li><li><p>Java的整型<code>常量默认为 int 型</code>。</p></li></ul><h4 id="4-1-1-补充：计算机存储单位"><a href="#4-1-1-补充：计算机存储单位" class="headerlink" title="4.1.1 补充：计算机存储单位"></a>4.1.1 补充：计算机存储单位</h4><ul><li><p><strong>字节（Byte）：</strong>是计算机用于<code>计量存储容量</code>的<code>基本</code>单位，一个字节等于8 bit。</p></li><li><p><strong>位（bit）：</strong>是数据存储的<code>最小</code>单位。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</p></li><li><p><strong>转换关系：</strong></p><ul><li>8 bit &#x3D; 1 Byte</li><li>1024 Byte &#x3D; 1 KB</li><li>1024 KB &#x3D; 1 MB</li><li>1024 MB &#x3D; 1 GB</li><li>1024 GB &#x3D; 1 TB</li></ul></li></ul><h3 id="4-2-浮点类型：float、double"><a href="#4-2-浮点类型：float、double" class="headerlink" title="4.2 浮点类型：float、double"></a>4.2 浮点类型：float、double</h3><ul><li>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220311001749699.png" alt="image-20220311001749699" style="zoom:80%;" /><ul><li>浮点型常量有两种表示形式：<ul><li>十进制数形式。如：5.12       512.0f        .512   (必须有小数点）</li><li>科学计数法形式。如：5.12e2      512E2     100E-2</li></ul></li><li>float：<code>单精度</code>，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。</li><li>double：<code>双精度</code>，精度是float的两倍。通常采用此类型。</li><li>定义float类型的变量，赋值时需要以”<code>f</code>“或”<code>F</code>“作为后缀。</li><li>Java 的浮点型<code>常量默认为double型</code>。</li></ul><h4 id="4-2-1-关于浮点型精度的说明"><a href="#4-2-1-关于浮点型精度的说明" class="headerlink" title="4.2.1 关于浮点型精度的说明"></a>4.2.1 关于浮点型精度的说明</h4><ul><li><p>并不是所有的小数都能可以精确的用二进制浮点数表示。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。</p></li><li><p>浮点类型float、double的数据不适合在<code>不容许舍入误差</code>的金融计算领域。如果需要<code>精确</code>数字计算或保留指定位数的精度，需要使用<code>BigDecimal类</code>。</p></li><li><p>测试用例：</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试1：（解释见章末企业真题：为什么0.1 + 0.2不等于0.3）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.30000000000000004</span><span class="token comment">//测试2：</span><span class="token keyword">float</span> ff1 <span class="token operator">=</span> <span class="token number">123123123f</span><span class="token punctuation">;</span><span class="token keyword">float</span> ff2 <span class="token operator">=</span> ff1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ff1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ff2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ff1 <span class="token operator">==</span> ff2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="4-2-2-应用举例"><a href="#4-2-2-应用举例" class="headerlink" title="4.2.2 应用举例"></a>4.2.2 应用举例</h4><p>案例1：定义圆周率并赋值为3.14，现有3个圆的半径分别为1.2、2.5、6，求它们的面积。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:36 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exercise1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">//圆周率</span>        <span class="token keyword">double</span> radius1 <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> radius2 <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> radius3 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个圆的面积："</span> <span class="token operator">+</span> <span class="token constant">PI</span> <span class="token operator">*</span> radius1 <span class="token operator">*</span> radius1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第2个圆的面积："</span> <span class="token operator">+</span> <span class="token constant">PI</span> <span class="token operator">*</span> radius2 <span class="token operator">*</span> radius2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第3个圆的面积："</span> <span class="token operator">+</span> <span class="token constant">PI</span> <span class="token operator">*</span> radius3 <span class="token operator">*</span> radius3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>案例2：小明要到美国旅游，可是那里的温度是以华氏度为单位记录的。<br>它需要一个程序将华氏温度（80度）转换为摄氏度，并以华氏度和摄氏度为单位分别显示该温度。</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">℃</span> <span class="token punctuation">=</span> <span class="token value attr-value">(℉ - 32) / 1.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exercise2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> hua <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> she <span class="token operator">=</span> <span class="token punctuation">(</span>hua<span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1.8</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华氏度"</span> <span class="token operator">+</span> hua<span class="token operator">+</span><span class="token string">"℉转为摄氏度是"</span> <span class="token operator">+</span>she<span class="token operator">+</span><span class="token string">"℃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4-3-字符类型：char"><a href="#4-3-字符类型：char" class="headerlink" title="4.3 字符类型：char"></a>4.3 字符类型：char</h3><ul><li><p>char 型数据用来表示通常意义上“<code>字符</code>”（<strong>占2字节</strong>）</p><ul><li>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</li></ul></li><li><p>字符型变量的三种表现形式：</p><ul><li><p><strong>形式1：</strong>使用单引号(‘ ‘)括起来的<code>单个字符</code>。</p><p>例如：char c1 &#x3D; ‘a’;   char c2 &#x3D; ‘中’; char c3 &#x3D;  ‘9’;</p></li><li><p><strong>形式2：</strong>直接使用 <code>Unicode值</code>来表示字符型常量：‘<code>\uXXXX</code>’。其中，XXXX代表一个十六进制整数。</p><p>例如：\u0023 表示 ‘#’。</p></li><li><p><strong>形式3：</strong>Java中还允许使用<code>转义字符‘\’</code>来将其后的字符转变为特殊字符型常量。</p><p>例如：char c3 &#x3D; ‘\n’;  &#x2F;&#x2F; ‘\n’表示换行符</p></li></ul><table><thead><tr><th align="center">转义字符</th><th align="center">说明</th><th align="center">Unicode表示方式</th></tr></thead><tbody><tr><td align="center"><code>\n</code></td><td align="center">换行符</td><td align="center">\u000a</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td><td align="center">\u0009</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">单引号</td><td align="center">\u0027</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜线</td><td align="center">\u005c</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格符</td><td align="center">\u0008</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车符</td><td align="center">\u000d</td></tr></tbody></table></li><li><p>char类型是可以进行运算的。因为它都对应有Unicode码，可以看做是一个数值。</p></li></ul><h3 id="4-4-布尔类型：boolean"><a href="#4-4-布尔类型：boolean" class="headerlink" title="4.4 布尔类型：boolean"></a>4.4 布尔类型：boolean</h3><ul><li><p><strong>boolean 类型用来判断逻辑条件，一般用于流程控制语句中：</strong></p><ul><li>if条件控制语句；</li><li>while循环控制语句；</li><li>for循环控制语句；</li><li>do-while循环控制语句；</li></ul></li><li><p><strong>boolean类型数据只有两个值：true、false，无其它。</strong></p><ul><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li>拓展：Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。——《java虚拟机规范 8版》</li></ul></li><li><p>举例：</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//true分支</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token comment">//false分支</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>经验之谈：</p><p>Less is More！建议不要这样写：if ( isFlag &#x3D; &#x3D; true )，只有新手才如此。关键也很容易写错成if(isFlag &#x3D; true)，这样就变成赋值isFlag为true而不是判断！<code>老鸟的写法</code>是if (isFlag)或者if ( !isFlag)。</p></blockquote><h2 id="5-基本数据类型变量间运算规则"><a href="#5-基本数据类型变量间运算规则" class="headerlink" title="5. 基本数据类型变量间运算规则"></a>5. 基本数据类型变量间运算规则</h2><p>在Java程序中，不同的基本数据类型（只有7种，不包含boolean类型）变量的值经常需要进行相互转换。</p><p>转换的方式有两种：<code>自动类型提升</code>和<code>强制类型转换</code>。</p><h3 id="5-1-自动类型提升"><a href="#5-1-自动类型提升" class="headerlink" title="5.1 自动类型提升"></a>5.1 自动类型提升</h3><p><strong>规则：<font color='red'>将取值范围小（或容量小）的类型自动提升为取值范围大（或容量大）的类型 </font>。</strong></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220523162200891.png" alt="image-20220523162200891" style="zoom:67%;" /><p>基本数据类型的转换规则如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220311002543688.png" alt="image-20220311002543688"></p><p>（1）当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token comment">//char自动升级为int，其实就是把字符的编码值赋值给i变量了</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//int自动升级为double</span><span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">1234567</span><span class="token punctuation">;</span> <span class="token comment">//右边的整数常量值如果在int范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span><span class="token comment">//byte bigB = 130;//错误，右边的整数常量值超过byte范围</span><span class="token keyword">long</span> bigNum <span class="token operator">=</span> <span class="token number">12345678912L</span><span class="token punctuation">;</span><span class="token comment">//右边的整数常量值如果超过int范围，必须加L，显式表示long类型。否则编译不通过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>（2）当存储范围小的数据类型与存储范围大的数据类型变量一起混合运算时，会按照其中最大的类型运算。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token keyword">double</span> sum <span class="token operator">=</span> i <span class="token operator">+</span> b <span class="token operator">+</span> d<span class="token punctuation">;</span><span class="token comment">//混合运算，升级为double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>（3）当byte,short,char数据类型的变量进行算术运算时，按照int类型处理。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span class="token comment">//编译报错，b1 + b2自动升级为int</span><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> c1 <span class="token operator">+</span> c2<span class="token punctuation">;</span><span class="token comment">//至少需要使用int类型来接收</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">+</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//113 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>练习：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">设 x 为<span class="token keyword">float</span>型变量，y为<span class="token keyword">double</span>型变量，a为<span class="token keyword">int</span>型变量，b为<span class="token keyword">long</span>型变量，c为<span class="token keyword">char</span>型变量，则表达式x <span class="token operator">+</span> y <span class="token operator">*</span> a <span class="token operator">/</span> x <span class="token operator">+</span> b <span class="token operator">/</span> y <span class="token operator">+</span> c的值类型为：<span class="token class-name">A</span><span class="token punctuation">.</span> <span class="token keyword">int</span>   <span class="token class-name">B</span><span class="token punctuation">.</span> <span class="token keyword">long</span>  <span class="token class-name">C</span><span class="token punctuation">.</span> <span class="token keyword">double</span>  <span class="token class-name">D</span><span class="token punctuation">.</span> <span class="token keyword">char</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h3><p>将<code>3.14</code> 赋值到<code>int</code> 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 编译报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>想要赋值成功，只有通过<code>强制类型转换</code>，将<code>double</code> 类型强制转换成<code>int</code> 类型才能赋值。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220523162407722.png" alt="image-20220523162407722" style="zoom:67%;" /><p><strong>规则：<font color='red'>将取值范围大（或容量大）的类型强制转换成取值范围小（或容量小）的类型。</font></strong></p><blockquote><p>自动类型提升是Java自动执行的，而强制类型转换是自动类型提升的逆运算，需要我们自己手动执行。</p></blockquote><p><strong>转换格式：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">数据类型<span class="token number">1</span> 变量名 <span class="token operator">=</span> <span class="token punctuation">(</span>数据类型<span class="token number">1</span><span class="token punctuation">)</span>被强转数据值<span class="token punctuation">;</span>  <span class="token comment">//()中的数据类型必须&lt;=变量值的数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>（1）当把存储范围大的值（常量值、变量的值、表达式计算的结果值）强制转换为存储范围小的变量时，可能会<code>损失精度</code>或<code>溢出</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span><span class="token punctuation">;</span><span class="token comment">//损失精度</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d<span class="token punctuation">;</span><span class="token comment">//损失精度</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span class="token comment">//溢出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>（2）当某个值想要提升数据类型时，也可以使用强制类型转换。这种情况的强制类型转换是<code>没有风险</code>的，通常省略。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">double</span> bigger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">/</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>（3）声明long类型变量时，可以出现省略后缀的情况。float则不同。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l1 <span class="token operator">=</span> <span class="token number">123L</span><span class="token punctuation">;</span><span class="token keyword">long</span> l2 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//如何理解呢？ 此时可以看做是int类型的123自动类型提升为long类型</span><span class="token comment">//long l3 = 123123123123; //报错，因为123123123123超出了int的范围。</span><span class="token keyword">long</span> l4 <span class="token operator">=</span> <span class="token number">123123123123L</span><span class="token punctuation">;</span><span class="token comment">//float f1 = 12.3; //报错，因为12.3看做是double，不能自动转换为float类型</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token number">12.3F</span><span class="token punctuation">;</span><span class="token keyword">float</span> f3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">12.3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>练习：判断是否能通过编译</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span>）<span class="token keyword">short</span>  s <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   s <span class="token operator">=</span> s<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>                     <span class="token comment">//判断：no</span><span class="token number">2</span>） <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>                  <span class="token comment">//判断：no</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断：yes</span><span class="token number">3</span>）<span class="token keyword">char</span> c <span class="token operator">=</span> ‘a’<span class="token punctuation">;</span>   <span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">float</span> d <span class="token operator">=</span> <span class="token number">.314F</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> result <span class="token operator">=</span> c<span class="token operator">+</span>i<span class="token operator">+</span>d<span class="token punctuation">;</span>       <span class="token comment">//判断：yes</span><span class="token number">4</span>） <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> t <span class="token operator">=</span> s <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token comment">//判断：no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>问答：为什么标识符的声明规则里要求不能数字开头？</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如果允许数字开头，则如下的声明编译就可以通过：</span><span class="token keyword">int</span> <span class="token number">123L</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//进而，如下的声明中l的值到底是123？还是变量123L对应的取值12呢？ 出现歧义了。</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">123L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-3-基本数据类型与String的运算"><a href="#5-3-基本数据类型与String的运算" class="headerlink" title="5.3 基本数据类型与String的运算"></a>5.3 基本数据类型与String的运算</h3><h4 id="5-3-1-字符串类型：String"><a href="#5-3-1-字符串类型：String" class="headerlink" title="5.3.1 字符串类型：String"></a>5.3.1 字符串类型：String</h4><ul><li>String不是基本数据类型，属于引用数据类型</li><li>使用一对<code>&quot;&quot;</code>来表示一个字符串，内部可以包含0个、1个或多个字符。</li><li>声明方式与基本数据类型类似。例如：String str &#x3D; “尚硅谷”;</li></ul><h4 id="5-3-2-运算规则"><a href="#5-3-2-运算规则" class="headerlink" title="5.3.2 运算规则"></a>5.3.2 运算规则</h4><p>1、任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> s1 <span class="token operator">+</span> num <span class="token operator">+</span> b1<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc10true</span><span class="token comment">//String s3 = num + b1 + s1;//编译不通过，因为int类型不能与boolean运算</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token punctuation">(</span>b1 <span class="token operator">+</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译通过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、String类型不能通过强制类型()转换，转为其他的类型</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>str<span class="token punctuation">;</span><span class="token comment">//错误的</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正确的，后面才能讲到，借助包装类的方法才能转</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="5-3-3-案例与练习"><a href="#5-3-3-案例与练习" class="headerlink" title="5.3.3 案例与练习"></a>5.3.3 案例与练习</h4><p><strong>案例：公安局身份登记</strong></p><p>要求填写自己的姓名、年龄、性别、体重、婚姻状况（已婚用true表示，单身用false表示）、联系方式等等。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:34 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"康师傅"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> gender <span class="token operator">=</span> <span class="token char">'男'</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> weight <span class="token operator">=</span> <span class="token number">145.6</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isMarried <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> phoneNumber <span class="token operator">=</span> <span class="token string">"13112341234"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄："</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别："</span> <span class="token operator">+</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"体重："</span> <span class="token operator">+</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"婚否："</span> <span class="token operator">+</span> isMarried<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电话："</span> <span class="token operator">+</span> phoneNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">",age = "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"，gender = "</span> <span class="token operator">+</span>                            gender <span class="token operator">+</span> <span class="token string">",weight = "</span> <span class="token operator">+</span> weight <span class="token operator">+</span> <span class="token string">",isMarried = "</span> <span class="token operator">+</span> isMarried <span class="token operator">+</span>                           <span class="token string">",phoneNumber = "</span> <span class="token operator">+</span> phoneNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="6-计算机底层如何存储数据"><a href="#6-计算机底层如何存储数据" class="headerlink" title="6. 计算机底层如何存储数据"></a>6. 计算机底层如何存储数据</h2><p>计算机世界中只有二进制，所以计算机中存储和运算的<code>所有数据</code>都要转为<code>二进制</code>。包括数字、字符、图片、声音、视频等。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/010101.jpg" alt="010101" style="zoom: 33%;" /><p><strong>世界上有10种人 ，认识和不认识二进制的。</strong></p><h3 id="6-1-进制的分类"><a href="#6-1-进制的分类" class="headerlink" title="6.1 进制的分类"></a>6.1 进制的分类</h3><ul><li><p><strong>十进制（decimal）</strong></p><ul><li>数字组成：0-9</li><li>进位规则：满十进一</li></ul></li><li><p><strong>二进制（binary）</strong></p><ul><li>数字组成：0-1</li><li>进位规则：满二进一，以<code>0b</code>或<code>0B</code>开头</li></ul></li><li><p><strong>八进制（octal）：很少使用</strong></p><ul><li>数字组成：0-7</li><li>进位规则：满八进一，以数字<code>0</code>开头表示</li></ul></li><li><p><strong>十六进制</strong></p><ul><li>数字组成：0-9，a-f</li><li>进位规则：满十六进一，以<code>0x</code>或<code>0X</code>开头表示。此处的 a-f 不区分大小写</li></ul></li></ul><p>代码演示：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BinaryTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//十进制</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0b101</span><span class="token punctuation">;</span><span class="token comment">//二进制</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">0127</span><span class="token punctuation">;</span><span class="token comment">//八进制</span><span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">0x12aF</span><span class="token punctuation">;</span><span class="token comment">//十六进制</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-2-进制的换算举例"><a href="#6-2-进制的换算举例" class="headerlink" title="6.2 进制的换算举例"></a>6.2 进制的换算举例</h3><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>a或A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>b或B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>c或C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>d或D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>e或E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>f或F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><h3 id="6-3-二进制的由来"><a href="#6-3-二进制的由来" class="headerlink" title="6.3 二进制的由来"></a>6.3 二进制的由来</h3><p>二进制，是计算技术中广泛采用的一种数制，由德国数理哲学大师<code>莱布尼茨</code>于1679年发明。</p><p>二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“<code>逢二进一</code>”。</p><p>二进制广泛应用于我们生活的方方面面。比如，广泛使用的摩尔斯电码（Morse Code），它由两种基本信号组成：短促的点信号“<code>·</code>”，读“<code>滴</code>”；保持一定时间的长信号“<code>—</code>”，读“<code>嗒</code>”。然后，组成了26个字母，从而拼写出相应的单词。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220520105721126.png" alt="image-20220520105721126" style="zoom:67%;" /><p>记忆技巧：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/morsecode.jpg" alt="morsecode" style="zoom:50%;" /><p>我们偶尔会看到的：SOS，即为：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220520110206899.png" alt="image-20220520110206899"></p><h3 id="6-4-二进制转十进制"><a href="#6-4-二进制转十进制" class="headerlink" title="6.4 二进制转十进制"></a>6.4 二进制转十进制</h3><p><strong>二进制如何表示整数？</strong></p><ul><li><p><font color='red'><strong>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code>。</strong></font></p><ul><li>正数：<code>最高位是0</code></li><li>负数：<code>最高位是1</code></li></ul></li><li><p>规 定</p><ul><li>正数的补码与反码、原码一样，称为<code>三码合一</code></li><li>负数的补码与反码、原码不一样：<ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul></li></ul><p><strong>二进制转十进制：权相加法</strong></p><p>针对于byte数据举例来说：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220523114701881.png" alt="image-20220523114701881"></p><ul><li><p>例如：byte类型（1个字节，8位）</p><p>25 &#x3D;&#x3D;&gt; 原码  0001 1001 &#x3D;&#x3D;&gt; 反码  0001 1001 –&gt;补码  0001 1001</p><p>-25 &#x3D;&#x3D;&gt;原码  1001 1001 &#x3D;&#x3D;&gt; 反码1110 0110 &#x3D;&#x3D;&gt;补码 1110 0111</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">整数：正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（原码）正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（反码）正数：<span class="token number">25</span>   <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（补码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">10000000</span> <span class="token number">00000000</span> <span class="token number">000000000</span> <span class="token number">00011001</span>（原码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">111111111</span> <span class="token number">11100110</span>（反码）负数：<span class="token operator">-</span><span class="token number">25</span>  <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">111111111</span> <span class="token number">11100111</span>（补码）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>一个字节可以存储的整数范围是多少？</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1个字节：8位</span><span class="token number">0000</span> <span class="token number">0001</span>  <span class="token operator">~</span>  <span class="token number">0111</span> <span class="token number">111</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">~</span><span class="token number">127</span><span class="token number">1000</span> <span class="token number">0001</span> <span class="token operator">~</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">127</span> <span class="token operator">~</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">0000</span> <span class="token number">0000</span> <span class="token operator">==</span><span class="token operator">></span><span class="token number">0</span><span class="token number">1000</span> <span class="token number">0000</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">128</span>（特殊规定）<span class="token operator">=</span><span class="token operator">-</span><span class="token number">127</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-5-十进制转二进制"><a href="#6-5-十进制转二进制" class="headerlink" title="6.5 十进制转二进制"></a>6.5 十进制转二进制</h3><p>十进制转二进制：<code>除2取余的逆</code></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312000042595.png" alt="image-20220312000042595" style="zoom:67%;" /><h3 id="6-6-二进制与八进制、十六进制间的转换"><a href="#6-6-二进制与八进制、十六进制间的转换" class="headerlink" title="6.6 二进制与八进制、十六进制间的转换"></a>6.6 二进制与八进制、十六进制间的转换</h3><p><strong>二进制转八进制</strong></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312000233863.png" alt="image-20220312000233863" style="zoom:80%;" /><p><strong>二进制转十六进制</strong></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312000251113.png" alt="image-20220312000251113" style="zoom:80%;" /><p><strong>八进制、十六进制转二进制</strong></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312000341297.png" alt="image-20220312000341297" style="zoom: 67%;" /><h3 id="6-7-各进制间的转换"><a href="#6-7-各进制间的转换" class="headerlink" title="6.7 各进制间的转换"></a>6.7 各进制间的转换</h3><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312000143438.png" alt="image-20220312000143438" style="zoom:80%;" /><p><strong>练习：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1.将以下十进制数转换为十六进制和二进制123  256  87  622.将以下十六进制数转换为十进制和二进制0x123   0x25F  0x38  0x62<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="7-运算符（Operator）"><a href="#7-运算符（Operator）" class="headerlink" title="7. 运算符（Operator）"></a>7. 运算符（Operator）</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>运算符的分类：</p><ul><li>按照<code>功能</code>分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">算术运算符（7个）</td><td align="center">+、-、*、&#x2F;、%、++、–</td></tr><tr><td align="center">赋值运算符（12个）</td><td align="center">&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&gt;&gt;&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&gt;&#x3D;、&amp;&#x3D;、|&#x3D;、^&#x3D;等</td></tr><tr><td align="center">比较(或关系)运算符（6个）</td><td align="center">&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td align="center">逻辑运算符（6个）</td><td align="center">&amp;、|、^、!、&amp;&amp;、||</td></tr><tr><td align="center">位运算符（7个）</td><td align="center">&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td align="center">条件运算符（1个）</td><td align="center">(条件表达式)?结果1:结果2</td></tr><tr><td align="center">Lambda运算符（1个）</td><td align="center">-&gt;（第18章时讲解）</td></tr></tbody></table><ul><li>按照<code>操作数个数</code>分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">一元运算符（单目运算符）</td><td align="center">正号（+）、负号（-）、++、–、!、~</td></tr><tr><td align="center">二元运算符（双目运算符）</td><td align="center">除了一元和三元运算符剩下的都是二元运算符</td></tr><tr><td align="center">三元运算符 （三目运算符）</td><td align="center">(条件表达式)?结果1:结果2</td></tr></tbody></table><h3 id="7-1-算术运算符"><a href="#7-1-算术运算符" class="headerlink" title="7.1 算术运算符"></a>7.1 算术运算符</h3><h4 id="7-1-1-基本语法"><a href="#7-1-1-基本语法" class="headerlink" title="7.1.1 基本语法"></a>7.1.1 基本语法</h4><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312000848332.png" alt="image-20220312000848332"></p><p>举例1：加减乘除模</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticTest1</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 12</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 计算机结果是0，为什么不是0.75呢？</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span>                <span class="token comment">//结果与被模数符号相同</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">%</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">%</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-1</span><span class="token comment">//商*除数 + 余数 = 被除数</span><span class="token comment">//5%-2  ==>商是-2，余数时1    (-2)*(-2)+1 = 5</span><span class="token comment">//-5%2  ==>商是-2，余数是-1   (-2)*2+(-1) = -4-1=-5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>举例2：“+”号的两种用法</p><ul><li>第一种：对于<code>+</code>两边都是数值的话，<code>+</code>就是加法的意思</li><li>第二种：对于<code>+</code>两边至少有一边是字符串的话，<code>+</code>就是拼接的意思</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticTest2</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 字符串类型的变量基本使用</span><span class="token comment">// 数据类型 变量名称 = 数据值;</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HelloWorld</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"Java"</span><span class="token punctuation">;</span><span class="token comment">// String + int --> String</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">+</span> <span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Java520</span><span class="token comment">// String + int + int</span><span class="token comment">// String+ int</span><span class="token comment">// String</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Java520</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>举例3：自加自减运算</p><p>理解：<code>++</code>  运算，表示<code>自增1</code>。同理，<code>--</code> 运算，表示<code>自减1</code>，用法与++ 一致。</p><p>1、单独使用</p><ul><li>变量在单独运算的时候，变量<code>前++</code>和变量<code>后++</code>，是没有区别的。</li><li>变量<code>前++</code>   ：例如 <code>++a</code> 。</li><li>变量<code>后++</code>   ：例如 <code>a++</code> 。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticTest3</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 定义一个int类型的变量a</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//++a;</span>a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 无论是变量前++还是变量后++，结果都是4</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2、复合使用</p><ul><li>和<code>其他变量放在一起使用</code>或者和<code>输出语句放在一起使用</code>，<code>前++</code>和<code>后++</code>就产生了不同。</li></ul><ul><li>变量<code>前++</code> ：变量先自增1，然后再运算。</li><li>变量<code>后++</code> ：变量先运算，然后再自增1。</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticTest4</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 其他变量放在一起使用</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//int y = ++x; // y的值是4，x的值是4，</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// y的值是3，x的值是4</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 和输出语句一起</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(++z);// 输出结果是6，z的值也是6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果是5，z的值是6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="7-1-2-案例与练习"><a href="#7-1-2-案例与练习" class="headerlink" title="7.1.2 案例与练习"></a>7.1.2 案例与练习</h4><p><strong>案例1：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">随意给出一个整数，打印显示它的个位数，十位数，百位数的值。格式如下：数字xxx的情况如下：个位数：十位数：百位数：例如：数字153的情况如下：个位数：3十位数：5百位数：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:20 */</span><span class="token keyword">class</span> <span class="token class-name">ArithmeticExer1</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">187</span><span class="token punctuation">;</span><span class="token keyword">int</span> bai <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> shi <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//int shi = num / 10 % 10;</span><span class="token keyword">int</span> ge <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"百位为："</span> <span class="token operator">+</span> bai<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"十位为："</span> <span class="token operator">+</span> shi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"个位为："</span> <span class="token operator">+</span> ge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>拓展：获取一个四位数的个位，十位，百位，千位</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:39 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticExer01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.定义一个变量，赋值为一个四位数整数，例如1234</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>        <span class="token comment">//2.通过运算操作求出个位，十位，百位，千位</span>        <span class="token keyword">int</span> ge <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> shi <span class="token operator">=</span> num <span class="token operator">/</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bai <span class="token operator">=</span> num <span class="token operator">/</span><span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> qian <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"个位上的数字是："</span> <span class="token operator">+</span> ge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"十位上的数字是："</span> <span class="token operator">+</span> shi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"百位上的数字是："</span> <span class="token operator">+</span> bai<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"千位上的数字是："</span> <span class="token operator">+</span> qian<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>案例2：</strong>为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 17:47 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticExer2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> hours <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> hours <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> hours <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为抵抗洪水，战士连续作战89小时："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hours <span class="token operator">+</span> <span class="token string">"是"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"天"</span> <span class="token operator">+</span> hour <span class="token operator">+</span><span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>练习1：算术运算符：自加、自减</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticExer3</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> i1<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1="</span><span class="token operator">+</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        i <span class="token operator">=</span> <span class="token operator">++</span>i1<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1="</span><span class="token operator">+</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        i <span class="token operator">=</span> i2<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i2="</span><span class="token operator">+</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        i <span class="token operator">=</span> <span class="token operator">--</span>i2<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i2="</span><span class="token operator">+</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>练习2：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5+5="</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印结果是？ 5+5=55 ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>练习3：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> bb1 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>bb1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bb1 = "</span> <span class="token operator">+</span> bb1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>练习4：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i <span class="token operator">*</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j = "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>练习5：（企业真题）写出下列程序的输出结果</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>m <span class="token operator">=</span> m<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//(1)先取m的值“2”放操作数栈 (2)m再自增,m=3 (3)再把操作数栈中的"2"赋值给m,m=2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-2-赋值运算符"><a href="#7-2-赋值运算符" class="headerlink" title="7.2 赋值运算符"></a>7.2 赋值运算符</h3><h4 id="7-2-1-基本语法"><a href="#7-2-1-基本语法" class="headerlink" title="7.2.1 基本语法"></a>7.2.1 基本语法</h4><ul><li><p>符号：&#x3D;</p><ul><li>当“&#x3D;”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li>支持<code>连续赋值</code>。</li></ul></li><li><p>扩展赋值运算符： +&#x3D;、 -&#x3D;、*&#x3D;、 &#x2F;&#x3D;、%&#x3D;</p><table><thead><tr><th align="center">赋值运算符</th><th align="center">符号解释</th></tr></thead><tbody><tr><td align="center"><code>+=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相加</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>-=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相减</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>*=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相乘</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>/=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相除</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>%=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>取余</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr></tbody></table></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetValueTest1</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">long</span> l1 <span class="token operator">=</span> i1<span class="token punctuation">;</span> <span class="token comment">//自动类型转换</span><span class="token keyword">byte</span> bb1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i1<span class="token punctuation">;</span> <span class="token comment">//强制类型转换</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">;</span><span class="token comment">//连续赋值的测试</span><span class="token comment">//以前的写法</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//连续赋值的写法</span><span class="token keyword">int</span> a2<span class="token punctuation">,</span>b2<span class="token punctuation">;</span>a2 <span class="token operator">=</span> b2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b3 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//举例说明+=  -=  *=  /=   %=  </span><span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>m1 <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//类似于 m1 = m1 + 5的操作，但不等同于。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span><span class="token comment">//练习1：开发中，如何实现一个变量+2的操作呢？</span><span class="token comment">// += 的操作不会改变变量本身的数据类型。其他拓展的运算符也如此。</span><span class="token comment">//写法1：推荐</span><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>s1 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//编译通过，因为在得到int类型的结果后，JVM自动完成一步强制类型转换，将int类型强转成short</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12</span><span class="token comment">//写法2：</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//s2 = s2 + 2;//编译报错，因为将int类型的结果赋值给short类型的变量s时，可能损失精度</span>s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//练习2：开发中，如何实现一个变量+1的操作呢？</span><span class="token comment">//写法1：推荐</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>num1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写法2：</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>num2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写法3：</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>num3 <span class="token operator">=</span> num3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="7-2-2-练习"><a href="#7-2-2-练习" class="headerlink" title="7.2.2 练习"></a>7.2.2 练习</h4><p>练习1：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> s <span class="token operator">=</span> s<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//① 编译报错</span>s <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">//② 正常执行</span><span class="token comment">//①和②有什么区别？ </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>练习2：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">*=</span> <span class="token number">0.1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>练习3：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>n <span class="token operator">*=</span> m<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//n = n * m++;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m="</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>练习4：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//n = n + (n++) + (++n)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>练习5：你有几种办法实现变量值减1？变量值减2呢？</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 16:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinusTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//练习①：变量值减1</span>        <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">//方式1：</span>        <span class="token comment">//s = (short)(s - 1);</span>        <span class="token comment">//方式2：推荐</span>        s<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//或者 --s</span>        <span class="token comment">//方式3：</span>        s <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//练习②：变量值减2</span>        <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">//方式1：</span>        <span class="token comment">//s1 = (short)(s1 - 2);</span>        <span class="token comment">//方式2：推荐</span>        s1 <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-3-比较-关系-运算符"><a href="#7-3-比较-关系-运算符" class="headerlink" title="7.3 比较(关系)运算符"></a>7.3 比较(关系)运算符</h3><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312001742263.png" alt="image-20220312001742263"></p><ul><li><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</p></li><li><p>&gt;   &lt;   &gt;&#x3D;  &lt;&#x3D; ：只适用于基本数据类型（除boolean类型之外）</p><p>&#x3D;&#x3D;   !&#x3D; ：适用于基本数据类型和引用数据类型</p></li><li><p>比较运算符“<code>==</code>”不能误写成“<code>=</code>”</p></li></ul><p>举例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CompareTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">!=</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">>=</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">=</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">=</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>思考：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//区分好==和=的区别。</span><span class="token keyword">if</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">//if(b1 = true)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果为真"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果为假"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-4-逻辑运算符"><a href="#7-4-逻辑运算符" class="headerlink" title="7.4 逻辑运算符"></a>7.4 逻辑运算符</h3><h4 id="7-4-1-基本语法"><a href="#7-4-1-基本语法" class="headerlink" title="7.4.1 基本语法"></a>7.4.1 基本语法</h4><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312001943403.png" alt="image-20220312001943403" style="zoom: 67%;" /><ul><li><p>逻辑运算符，操作的都是boolean类型的变量或常量，而且运算得结果也是boolean类型的值。</p></li><li><p>运算符说明：</p><ul><li>&amp; 和 &amp;&amp;：表示”且”关系，当符号左右两边布尔值都是true时，结果才能为true。否则，为false。</li><li>| 和 || ：表示”或”关系，当符号两边布尔值有一边为true时，结果为true。当两边都为false时，结果为false</li><li>! ：表示”非”关系，当变量布尔值为true时，结果为false。当变量布尔值为false时，结果为true。</li><li>^ ：当符号左右两边布尔值不同时，结果为true。当两边布尔值相同时，结果为false。<ul><li>理解：<code>异或，追求的是“异”！</code></li></ul></li></ul></li><li><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成 3 &lt; x &lt; 6，应该写成x &gt; 3 &amp; x &lt; 6 。</p></li><li><p><strong>区分“&amp;”和“&amp;&amp;”：</strong></p><ul><li><p>相同点：如果符号左边是true，则二者都执行符号右边的操作</p></li><li><p>不同点：&amp; ： 如果符号左边是false,则继续执行符号右边的操作</p></li></ul><p>​                                &amp;&amp; ：如果符号左边是false,则不再继续执行符号右边的操作</p><ul><li>建议：开发中，推荐使用 &amp;&amp;</li></ul></li><li><p><strong>区分“|”和“||”：</strong></p></li><li><p>相同点：如果符号左边是false，则二者都执行符号右边的操作</p></li><li><p>不同点：| ： 如果符号左边是true，则继续执行符号右边的操作</p><p>​               || ：如果符号左边是true，则不再继续执行符号右边的操作</p></li><li><p>建议：开发中，推荐使用 ||</p></li></ul><p>代码举例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// &amp; 与，且；有false则false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// | 或；有true则true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ^ 异或；相同为false，不同为true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ! 非；非false则true，非true则false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//&amp;和&amp;&amp;的区别</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//|和||的区别</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="7-4-2-案例与练习"><a href="#7-4-2-案例与练习" class="headerlink" title="7.4.2 案例与练习"></a>7.4.2 案例与练习</h4><p><strong>案例：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1. 定义类 CompareLogicExer2. 定义 main方法3. 定义一个int类型变量a,变量b,都赋值为204. 定义boolean类型变量bo1 , 判断++a 是否被3整除,并且a++ 是否被7整除,将结果赋值给bo15. 输出a的值,bo1的值6. 定义boolean类型变量bo2 , 判断b++ 是否被3整除,并且++b 是否被7整除,将结果赋值给bo27. 输出b的值,bo2的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:42 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareLogicExer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> bo1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>a <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bo1的值："</span> <span class="token operator">+</span> bo1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a的值："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> bo2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">++</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">++</span>b <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bo2的值："</span> <span class="token operator">+</span> bo2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b的值："</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>练习1：</strong>区分 &amp; 和 &amp;&amp;</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token operator">++</span>y <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">",y="</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>y <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">",y="</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>练习2：</strong>区分 | 和 ||</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token operator">++</span>y<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">",y="</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">++</span>y<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token operator">+</span><span class="token string">",y="</span><span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>练习3：</strong>程序输出</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span>  <span class="token class-name">Test</span>  <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> z <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            z<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>z <span class="token operator">==</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            z<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"z="</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//结果为：</span><span class="token comment">//z= 46</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="7-5-位运算符（难点、非重点）"><a href="#7-5-位运算符（难点、非重点）" class="headerlink" title="7.5 位运算符（难点、非重点）"></a>7.5 位运算符（难点、非重点）</h3><h4 id="7-5-1-基本语法"><a href="#7-5-1-基本语法" class="headerlink" title="7.5.1 基本语法"></a>7.5.1 基本语法</h4><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220313174721111.png" alt="image-20220313174721111" style="zoom:75%;" /><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312002506339.png" alt="image-20220312002506339" style="zoom:67%;" /><ul><li>位运算符的运算过程都是基于二进制的补码运算</li></ul><p><strong>（1）左移：&lt;&lt;</strong></p><p><font color='red'>运算规则：在一定范围内，数据每向左移动一位，相当于原数据*2。（正数、负数都适用）</font></p><p>【注意】当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">3</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span>  类似于  <span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span>的<span class="token number">4</span>次幂 <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">16</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">48</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225113651675.png" alt="image-20200225113651675"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span>  类似于  <span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">2</span>的<span class="token number">4</span>次幂 <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">16</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">48</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225114707524.png" alt="image-20200225114707524"></p><p><strong>（2）右移：&gt;&gt;</strong></p><p><font color='red'>运算规则：在一定范围内，数据每向右移动一位，相当于原数据&#x2F;2。（正数、负数都适用）</font></p><p>【注意】如果不能整除，<code>向下取整</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">69</span><span class="token operator">>></span><span class="token number">4</span>  类似于  <span class="token number">69</span><span class="token operator">/</span><span class="token number">2</span>的<span class="token number">4</span>次 <span class="token operator">=</span> <span class="token number">69</span><span class="token operator">/</span><span class="token number">16</span> <span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225115636844.png" alt="image-20200225115636844"></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">-69&gt;&gt;4  类似于  -69&#x2F;2的4次 &#x3D; -69&#x2F;16 &#x3D; -5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225120112188.png" alt="image-20200225120112188"></p><p><strong>（3）无符号右移：&gt;&gt;&gt;</strong></p><p>运算规则：往右移动后，左边空出来的位直接补0。（正数、负数都适用）</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">69&gt;&gt;&gt;4  类似于  69&#x2F;2的4次 &#x3D; 69&#x2F;16 &#x3D;4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225121104734.png" alt="image-20200225121104734"></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">-69&gt;&gt;&gt;4   结果：268435451<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225121244290.png" alt="image-20200225121244290"></p><p><strong>（4）按位与：&amp;</strong></p><p>运算规则：对应位都是1才为1，否则为0。</p><ul><li><p>1 &amp; 1 结果为1</p></li><li><p>1 &amp; 0 结果为0</p></li><li><p>0 &amp; 1 结果为0</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225122440953.png" alt="image-20200225122440953"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225122221616.png" alt="image-20200225122221616"></p><p><strong>（5）按位或：|</strong></p><p>运算规则：对应位只要有1即为1，否则为0。</p><ul><li><p>1 | 1 结果为1</p></li><li><p>1 | 0 结果为1</p></li><li><p>0 | 1 结果为1</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">9</span> <span class="token operator">|</span> <span class="token number">7</span>  <span class="token comment">//结果： 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225122758851.png" alt="image-20200225122758851"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token number">9</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token comment">//结果： -9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225123409130.png" alt="image-20200225123409130"></p><p><strong>（6）按位异或：^</strong></p><p>运算规则：对应位一个为1一个为0，才为1，否则为0。</p><ul><li><p>1 ^ 1 结果为0</p></li><li><p>1 ^ 0 结果为1</p></li><li><p>0 ^ 1 结果为1</p></li><li><p>0 ^ 0 结果为0</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">9</span> <span class="token operator">^</span> <span class="token number">7</span>  <span class="token comment">//结果为14</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225123445305.png" alt="image-20200225123445305"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token number">9</span> <span class="token operator">^</span> <span class="token number">7</span> <span class="token comment">//结果为-16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225133145727.png" alt="image-20200225133145727"></p><p><strong>（7）按位取反：~</strong></p><p>运算规则：对应位为1，则结果为0；对应位为0，则结果为1。</p><ul><li><p>~0就是1</p></li><li><p>~1就是0</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">~</span><span class="token number">9</span>  <span class="token comment">//结果：-10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225124112662.png" alt="image-20200225124112662"></p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">~</span><span class="token operator">-</span><span class="token number">9</span>  <span class="token comment">//结果：8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20200225124156862.png" alt="image-20200225124156862"></p><h4 id="7-5-2-举例"><a href="#7-5-2-举例" class="headerlink" title="7.5.2 举例"></a>7.5.2 举例</h4><p><strong>举例1：</strong></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/snipaste_20220312_002549.jpg" alt="snipaste_20220312_002549" style="zoom: 67%;" /><p><strong>举例2：体会 m &#x3D; k ^ n &#x3D; (m ^ n) ^ n</strong></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312002736157.png" alt="image-20220312002736157" style="zoom:67%;" /><h4 id="7-5-3-案例"><a href="#7-5-3-案例" class="headerlink" title="7.5.3 案例"></a>7.5.3 案例</h4><p><strong>案例1：</strong>高效的方式计算2 * 8的值（经典面试题）</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">答案：2 &lt;&lt; 3 、  8  &lt;&lt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>案例2：</strong>如何交换两个int型变量的值？String呢？</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 16:58 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BitExer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//（推荐）实现方式1：优点：容易理解，适用于不同数据类型    缺点：需要额外定义变量</span><span class="token comment">//int temp = m;</span><span class="token comment">//m = n;</span><span class="token comment">//n = temp;</span><span class="token comment">//实现方式2：优点：没有额外定义变量    缺点：可能超出int的范围；只能适用于数值类型</span><span class="token comment">//m = m + n; //15 = 10 + 5</span><span class="token comment">//n = m - n;//10 = 15 - 5</span><span class="token comment">//m = m - n;//5 = 15 - 10</span><span class="token comment">//实现方式3：优点：没有额外定义变量    缺点：不易理解；只能适用于数值类型</span>m <span class="token operator">=</span> m <span class="token operator">^</span> n<span class="token punctuation">;</span> n <span class="token operator">=</span> m <span class="token operator">^</span> n<span class="token punctuation">;</span> <span class="token comment">//(m ^ n) ^ n</span>m <span class="token operator">=</span> m <span class="token operator">^</span> n<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-6-条件运算符"><a href="#7-6-条件运算符" class="headerlink" title="7.6 条件运算符"></a>7.6 条件运算符</h3><h4 id="7-6-1-基本语法"><a href="#7-6-1-基本语法" class="headerlink" title="7.6.1 基本语法"></a>7.6.1 基本语法</h4><ul><li>条件运算符格式：</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token operator">?</span> 表达式<span class="token number">1</span><span class="token operator">:</span>表达式<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><p>说明：条件表达式是boolean类型的结果，根据boolean的值选择表达式1或表达式2</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220312002841945.png" alt="image-20220312002841945" style="zoom:67%;" /></li><li><p>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span> <span class="token operator">?</span> <span class="token number">100</span> <span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//200</span>        <span class="token keyword">boolean</span> marry <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>marry <span class="token operator">?</span> <span class="token string">"已婚"</span> <span class="token operator">:</span> <span class="token string">"未婚"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token punctuation">(</span>m1 <span class="token operator">></span> m2<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token string">"num非正数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="7-6-2-案例"><a href="#7-6-2-案例" class="headerlink" title="7.6.2 案例"></a>7.6.2 案例</h4><p><strong>案例1：</strong>获取两个数中的较大值</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:40 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionExer1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取两个数的较大值</span>        <span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max1 <span class="token operator">=</span> <span class="token punctuation">(</span>m1 <span class="token operator">></span> m2<span class="token punctuation">)</span><span class="token operator">?</span> m1 <span class="token operator">:</span> m2<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1和m2中的较大值为"</span> <span class="token operator">+</span> max1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>案例2：</strong>获取三个数中的最大值</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:43 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionExer2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        <span class="token comment">//写法1：</span>        <span class="token keyword">int</span> tempMax <span class="token operator">=</span> <span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1<span class="token operator">:</span>n2<span class="token punctuation">;</span>        <span class="token keyword">int</span> finalMax <span class="token operator">=</span> <span class="token punctuation">(</span>tempMax <span class="token operator">></span> n3<span class="token punctuation">)</span><span class="token operator">?</span> tempMax <span class="token operator">:</span> n3<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三个数中最大值为："</span> <span class="token operator">+</span> finalMax<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写法2：不推荐，可读性差</span>        <span class="token keyword">int</span> finalMax1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1<span class="token operator">:</span>n2<span class="token punctuation">)</span> <span class="token operator">></span> n3<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span><span class="token operator">?</span> n1<span class="token operator">:</span>n2<span class="token punctuation">)</span> <span class="token operator">:</span> n3<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三个数中最大值为："</span> <span class="token operator">+</span> finalMax1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>案例3：</strong>今天是周2，10天以后是周几？</p><p>要求：控制台输出”今天是周2，10天以后是周x”。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 尚硅谷-宋红康 * @create 12:46 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionExer3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> week <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        week <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>        week <span class="token operator">%=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是周2,10天以后是周"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"日"</span> <span class="token operator">:</span> week<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="7-6-3-与if-else的转换关系"><a href="#7-6-3-与if-else的转换关系" class="headerlink" title="7.6.3 与if-else的转换关系"></a>7.6.3 与if-else的转换关系</h4><ul><li><p>凡是可以使用条件运算符的地方，都可以改写为if-else结构。反之，不成立。</p></li><li><p>开发中，如果既可以使用条件运算符，又可以使用if-else，推荐使用条件运算符。因为执行效率稍高。</p></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//if-else实现获取两个数的较大值</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> max<span class="token punctuation">;</span><span class="token comment">//声明变量max，用于记录i1和i2的较大值</span><span class="token keyword">if</span><span class="token punctuation">(</span>i1 <span class="token operator">></span> i2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    max <span class="token operator">=</span> i1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    max <span class="token operator">=</span> i2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-7-运算符优先级"><a href="#7-7-运算符优先级" class="headerlink" title="7.7 运算符优先级"></a>7.7 运算符优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p>上一行中的运算符总是优先于下一行的。</p><table><thead><tr><th>优先级</th><th align="center">运算符说明</th><th align="center">Java运算符</th></tr></thead><tbody><tr><td>1</td><td align="center">括号</td><td align="center"><code>()</code>、<code>[]</code>、<code>&#123;&#125;</code></td></tr><tr><td>2</td><td align="center">正负号</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>3</td><td align="center">单元运算符</td><td align="center"><code>++</code>、<code>--</code>、<code>~</code>、<code>！</code></td></tr><tr><td>4</td><td align="center">乘法、除法、求余</td><td align="center"><code>*</code>、<code>/</code>、<code>%</code></td></tr><tr><td>5</td><td align="center">加法、减法</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>6</td><td align="center">移位运算符</td><td align="center"><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td></tr><tr><td>7</td><td align="center">关系运算符</td><td align="center"><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>、<code>instanceof</code></td></tr><tr><td>8</td><td align="center">等价运算符</td><td align="center"><code>==</code>、<code>!=</code></td></tr><tr><td>9</td><td align="center">按位与</td><td align="center"><code>&amp;</code></td></tr><tr><td>10</td><td align="center">按位异或</td><td align="center"><code>^</code></td></tr><tr><td>11</td><td align="center">按位或</td><td align="center">&#96;</td></tr><tr><td>12</td><td align="center">条件与</td><td align="center"><code>&amp;&amp;</code></td></tr><tr><td>13</td><td align="center">条件或</td><td align="center">&#96;</td></tr><tr><td>14</td><td align="center">三元运算符</td><td align="center"><code>? :</code></td></tr><tr><td>15</td><td align="center">赋值运算符</td><td align="center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></td></tr><tr><td>16</td><td align="center">位赋值运算符</td><td align="center"><code>&amp;=</code>、&#96;</td></tr></tbody></table><blockquote><p>开发建议：</p><ol><li>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>表达式的执行顺序。</li><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>来完成。例如：<br>​ (num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</li></ol></blockquote><h2 id="8-【拓展】关于字符集"><a href="#8-【拓展】关于字符集" class="headerlink" title="8. 【拓展】关于字符集"></a>8. 【拓展】关于字符集</h2><h3 id="8-1-字符集"><a href="#8-1-字符集" class="headerlink" title="8.1 字符集"></a>8.1 字符集</h3><ul><li><strong>编码与解码</strong></li></ul><p>计算机中储存的信息都是用<code>二进制数</code>表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<code>编码</code> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<code>解码</code> 。</p><ul><li><p><strong>字符编码（Character Encoding）</strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p></li><li><p><strong>字符集</strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p></li></ul><h3 id="8-2-ASCII码"><a href="#8-2-ASCII码" class="headerlink" title="8.2 ASCII码"></a>8.2 ASCII码</h3><ul><li>ASCII码（American Standard Code for Information Interchange，美国信息交换标准代码）：上个世纪60年代，美国制定了一套字符编码，对<code>英语字符</code>与二进制位之间的关系，做了统一规定。这被称为ASCII码。</li><li>ASCII码用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符（最前面的1位统一规定为0），共<code>128个</code>字符。比如：空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。</li><li>缺点：不能表示所有字符。</li></ul><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220513095907601.png" alt="image-20220513095907601"></p><h3 id="8-3-ISO-8859-1字符集"><a href="#8-3-ISO-8859-1字符集" class="headerlink" title="8.3 ISO-8859-1字符集"></a>8.3 ISO-8859-1字符集</h3><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰语、德语、意大利语、葡萄牙语等</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul><h3 id="8-4-GBxxx字符集"><a href="#8-4-GBxxx字符集" class="headerlink" title="8.4 GBxxx字符集"></a>8.4 GBxxx字符集</h3><ul><li>GB就是国标的意思，是为了<code>显示中文</code>而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同，即向下兼容ASCII码。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含<code>7000多个简体汉字</code>，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，这就是常说的”全角”字符，而原来在127号以下的那些符号就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了<code>双字节</code>编码方案，共收录了<code>21003个</code>汉字，完全兼容GB2312标准，同时支持<code>繁体汉字</code>以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字<code>70244个</code>，采用<code>多字节</code>编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul><h3 id="8-5-Unicode码"><a href="#8-5-Unicode码" class="headerlink" title="8.5 Unicode码"></a>8.5 Unicode码</h3><ul><li><p>Unicode编码为表达<code>任意语言的任意字符</code>而设计，也称为统一码、标准万国码。Unicode 将世界上所有的文字用<code>2个字节</code>统一进行编码，为每个字符设定唯一的二进制编码，以满足跨语言、跨平台进行文本处理的要求。</p></li><li><p>Unicode 的缺点：这里有三个问题：</p><ul><li>第一，英文字母只用一个字节表示就够了，如果用更多的字节存储是<code>极大的浪费</code>。</li><li>第二，如何才能<code>区别Unicode和ASCII</code>？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？</li><li>第三，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，<code>不够表示所有字符</code>。</li></ul></li><li><p>Unicode在很长一段时间内无法推广，直到互联网的出现，为解决Unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现。具体来说，有三种编码方案，UTF-8、UTF-16和UTF-32。</p></li></ul><h3 id="8-6-UTF-8"><a href="#8-6-UTF-8" class="headerlink" title="8.6 UTF-8"></a>8.6 UTF-8</h3><ul><li>Unicode是字符集，UTF-8、UTF-16、UTF-32是三种<code>将数字转换到程序数据</code>的编码方案。顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。其中，UTF-8 是在互联网上<code>使用最广</code>的一种 Unicode 的实现方式。</li><li>互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。UTF-8 是一种<code>变长的编码方式</code>。它可以使用 1-4 个字节表示一个符号它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。</li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul><ul><li>举例</li></ul><p>Unicode符号范围  | UTF-8编码方式</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">(十六进制)           | （二进制）————————————————————|—–—–—–—–—–—–—–—–—–—–—–—–—–—–0000 0000-0000 007F | 0xxxxxxx（兼容原来的ASCII）0000 0080-0000 07FF | 110xxxxx 10xxxxxx0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220525164636164.png" alt="image-20220525164636164"></p><h3 id="8-7-小结"><a href="#8-7-小结" class="headerlink" title="8.7 小结"></a>8.7 小结</h3><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/%E5%AD%97%E7%AC%A6%E9%9B%86.jpg" alt="字符集"></p><blockquote><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p></blockquote><h2 id="9-第二章企业真题"><a href="#9-第二章企业真题" class="headerlink" title="9.第二章企业真题"></a>9.第二章企业真题</h2><ol><li><strong>使用高效的方式计算2 * 8</strong></li></ol><blockquote><p>2 &lt;&lt; 3，即2左移三位</p></blockquote><ol start="2"><li><strong>&amp;和&amp;&amp;的区别</strong></li></ol><blockquote><p>&amp;是逻辑与，&amp;&amp;是短路与</p><p>当前第一个条件是ture的时候，两者都会判断第二个条件</p><p>当前第一个条件是flase的时候，&amp;会判断第二个条件，而&amp;&amp;直接短路，并不会计算</p></blockquote><ol start="3"><li><strong>Java中的基本数据类型有哪些？String是基本数据类型吗？</strong></li></ol><blockquote><p>Java中的基本数据类型一共有8种，分别是</p><p>整型：byte、short、int、long</p><p>浮点型：float、double</p><p>字符型：chat</p><p>布尔型：boolean</p><p>String不是基本数据类型，而是引用数据类型（String类）。</p></blockquote><ol start="4"><li><strong>java开发中计算金额时应该使用什么数据类型？</strong></li></ol><blockquote><p>金额不能使用浮点类型，而应该使用<code>BigDecimal</code>类型</p></blockquote><ol start="5"><li><strong>char型变量中能不能存储一个汉字，为什么？</strong></li></ol><blockquote><p>可以，因为char使用的是unicode字符集，其包括了全世界内的所有字符</p></blockquote><ol start="6"><li><strong>代码分析</strong></li></ol><blockquote><p>short s1 &#x3D; 1;</p><p>s1 &#x3D; s1 + 1</p><p>错误，计算结果右边时int类型，要转为short类型需要进行强制类型转化</p></blockquote><blockquote><p>short s1 &#x3D; 1;</p><p>s1 +&#x3D; 1</p><p>正确，因为赋值运算符+&#x3D;不会改变数据类型</p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第01章_Java语言概述</title>
    <link href="/2021/03/01/Java%E5%9F%BA%E7%A1%80-%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <url>/2021/03/01/Java%E5%9F%BA%E7%A1%80-%E7%AC%AC01%E7%AB%A0_Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="1-Java知识脉络图"><a href="#1-Java知识脉络图" class="headerlink" title="1. Java知识脉络图"></a>1. Java知识脉络图</h2><h3 id="1-1-Java基础全程脉络图"><a href="#1-1-Java基础全程脉络图" class="headerlink" title="1.1 Java基础全程脉络图"></a>1.1 Java基础全程脉络图</h3><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/Java%E5%9F%BA%E7%A1%80%E5%85%A8%E7%A8%8B%E8%84%89%E7%BB%9C%E5%9B%BE.png" alt="Java基础全程脉络图" style="zoom: 80%;" /><h3 id="1-2-本章专题与脉络"><a href="#1-2-本章专题与脉络" class="headerlink" title="1.2 本章专题与脉络"></a>1.2 本章专题与脉络</h3><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/%E7%AC%AC1%E9%98%B6%E6%AE%B5%EF%BC%9AJava%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-%E7%AC%AC01%E7%AB%A0.png" alt="第1阶段：Java基本语法-第01章" style="zoom: 45%;" /><h2 id="6-Java语言概述"><a href="#6-Java语言概述" class="headerlink" title="6. Java语言概述"></a>6. Java语言概述</h2><h3 id="6-1-Java概述"><a href="#6-1-Java概述" class="headerlink" title="6.1 Java概述"></a>6.1 Java概述</h3><ul><li><p>是<code>SUN</code>(Stanford University Network，斯坦福大学网络公司 ) <code>1995年</code>推出的一门高级编程语言。</p></li><li><p>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在<code>Web浏览器</code>中运行。这些Java程序被称为<code>Java小程序</code><br>（applet），内嵌在HTML代码中。</p></li><li><p>伴随着互联网的迅猛发展，以及Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p></li></ul><h3 id="6-2-Java语言简史"><a href="#6-2-Java语言简史" class="headerlink" title="6.2 Java语言简史"></a>6.2 Java语言简史</h3><p><strong>起步阶段：</strong></p><p>1991年，Sun公司的工程师小组想要设计一种语言，应用在<code>电视机</code>、<code>电话</code>、<code>闹钟</code>、<code>烤面包机</code><br>等家用电器的控制和通信。由于这些设备的<code>处理能力</code>和<code>内存</code>都很有限，并且不同的厂商会选择不同的中央处理器(CPU)<br>，因此这种语言的关键是<code>代码短小</code>、<code>紧凑</code>且<code>与平台无关</code>（即不能与任何特定的体系结构捆绑在一起）。</p><p>Gosling团队率先创造了这个语言，并命名为“<code>Oak</code>“（起名的原因是因为他非常喜欢自己办公室外的橡树)<br>。后因智能化家电的市场需求没有预期的高，Sun公司放弃了该项计划。</p><p>随着20世纪90年代互联网的发展，Sun公司发现该语言在互联网上应用的前景，于是改造了Oak，于1995年5月以Java的名称正式发布。（Java是印度尼西亚<code>爪哇岛</code><br>的英文名称，因盛产咖啡而闻名。）</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220309230839100.png" alt="image-20220309230839100"></p><p><strong>发展阶段：</strong></p><table><thead><tr><th align="center">发行版本</th><th align="center">发行时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Java 1.0</td><td align="center">1996.01.23</td><td align="center">Sun公司发布了Java的第一个开发工具包</td></tr><tr><td align="center">Java 1.1</td><td align="center">1996.08.12</td><td align="center">JavaOne会议召开，创当时全球同类会议规模之最。</td></tr><tr><td align="center">Java 1.2</td><td align="center">1998.12.08</td><td align="center">Java拆分成：J2SE（标准版）、J2EE（企业版）、J2ME（小型版）</td></tr><tr><td align="center">Java 1.3</td><td align="center">2000.05.08</td><td align="center"></td></tr><tr><td align="center">Java1.4</td><td align="center">2004.02.06</td><td align="center"></td></tr><tr><td align="center"><strong>Java 5.0</strong></td><td align="center"><strong>2004.09.30</strong></td><td align="center"><strong>①版本号从1.4直接更新至5.0；②平台更名为JavaSE、JavaEE、JavaME</strong></td></tr><tr><td align="center">Java 6.0</td><td align="center">2006.12.11</td><td align="center">2009.04.20 Oracle宣布收购SUN公司</td></tr><tr><td align="center"></td><td align="center">2009.04.20</td><td align="center">Oracle公司收购SUN，交易价格<code>74亿</code>美元。</td></tr><tr><td align="center">Java 7.0</td><td align="center">2011.07.02</td><td align="center"></td></tr><tr><td align="center"><strong>Java 8.0</strong></td><td align="center"><strong>2014.03.18</strong></td><td align="center"><strong>此版本是继Java 5.0以来变化最大的版本。是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 9.0</td><td align="center">2017.09.22</td><td align="center">①此版本开始，<strong>每半年更新一次</strong>；②Java 9.0开始不再支持windows 32位系统</td></tr><tr><td align="center">Java 10.0</td><td align="center">2018.03.21</td><td align="center"></td></tr><tr><td align="center"><strong>Java 11.0</strong></td><td align="center"><strong>2018.09.25</strong></td><td align="center"><strong>JDK安装包取消独立JRE安装包，是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 12.0</td><td align="center">2019.03.19</td><td align="center"></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center"><strong>Java17.0</strong></td><td align="center"><strong>2021.09</strong></td><td align="center"><strong>发布Java 17.0，版本号也称为21.9，是长期支持版本。</strong></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center">Java19.0</td><td align="center">2022.09</td><td align="center">发布Java19.0，版本号也称为22.9。</td></tr></tbody></table><h3 id="6-3-Java之父"><a href="#6-3-Java之父" class="headerlink" title="6.3 Java之父"></a>6.3 Java之父</h3><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310152923961.png" alt="image-20220310152923961" style="zoom:67%;" /><ul><li><code>詹姆斯·高斯林(James Gosling)</code>先生以“Java 技术之父”而闻名于世。他是Java<br>技术的创始人，他亲手设计了Java语言，并开发了Java编译器和Java虚拟机，使Java成为了世界上最流行的开发语言。</li><li>James Gosling于1984 年加入Sun公司，并一直服务于Sun公司，直至2010年前后，Sun被Oracle并购而加入Oracle，担任客户端软件集团的首席技术官;<br>2010年4月从Oracle离职。</li></ul><h3 id="6-4-公司八卦"><a href="#6-4-公司八卦" class="headerlink" title="6.4 公司八卦"></a>6.4 公司八卦</h3><ul><li><strong>SUN 与 Oracle</strong></li></ul><blockquote><p>SUN是一家<code>极具创新能力</code>的公司，2001年 “9.11”以前，SUN公司市值<code>超过1000亿</code>美元。<br>但是没能利用Java构建一个强有力、可变现的生态系统，没打好Java这张牌。此后，互联网泡沫破裂，硬件需求大幅减少，它的市值在一个月之内跌幅超过90%。<br><strong>SUN公司的成长用了20年，而衰落只用了1年！</strong></p></blockquote><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220309230923533.png" alt="image-20220309230923533" style="zoom: 67%;" /><ul><li><strong>Oracle 与 Google</strong></li></ul><blockquote><p>Google和Oracle的侵权事件：</p><p>2010 年 8 月，Oracle 起诉 Google 的 Android 系统侵权，要求赔偿 26 亿美元。</p><ul><li>Oracle认为Google的代码中使用了Java的<code>37个API</code>，并且认为Google是故意为之，因为这样做的好处是可以让更多的Java程序员更容易接受Android的代码。</li><li>Oracle认为Android 中有<code>9行代码</code>直接抄袭了Java的实现。这9行牛气哄哄的代码都出自一人之手，他就是Java<br>  大牛——<code>Joshua Bloch</code>。</li></ul><p>2018 年 3 月，美国联邦巡回上诉法院裁决，谷歌侵犯了甲骨文的版权，支付高达<code>88亿美元</code>的赔偿金。</p><p>2021 年 4 月，美国最高法院给出了最终裁决：谷歌胜诉，其代码属于“合理使用”的范畴。为期十多年的软件行业“第一版权案”落幕。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Code In OpenJDK / Android ：</span><span class="token number">1.</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rangeCheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> arrayLen<span class="token punctuation">,</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span><span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token number">2.</span><span class="token keyword">if</span><span class="token punctuation">(</span>fromIndex<span class="token operator">></span>toIndex<span class="token punctuation">)</span>        <span class="token number">3.</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"fromIndex("</span><span class="token operator">+</span>fromIndex<span class="token operator">+</span>        <span class="token number">4.</span><span class="token string">") > toIndex("</span><span class="token operator">+</span>toIndex<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">5.</span><span class="token keyword">if</span><span class="token punctuation">(</span>fromIndex<span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token number">6.</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">7.</span><span class="token keyword">if</span><span class="token punctuation">(</span>toIndex<span class="token operator">></span>arrayLen<span class="token punctuation">)</span>        <span class="token number">8.</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token number">9.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20221027145908490.png" alt="image-20221027145908490"></p><h3 id="6-5-Java技术体系平台"><a href="#6-5-Java技术体系平台" class="headerlink" title="6.5 Java技术体系平台"></a>6.5 Java技术体系平台</h3><ul><li><strong>Java SE(Java Standard Edition)标准版</strong><ul><li>支持面向<code>桌面级应用</code>（如Windows下的应用程序）的Java平台，即定位个人计算机的应用开发。</li><li>包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。</li><li>此版本以前称为J2SE</li></ul></li><li><strong>Java EE(Java Enterprise Edition)企业版</strong><ul><li>为开发企业环境下的应用程序提供的一套解决方案，即定位<code>在服务器端的Web应用开发</code>。</li><li>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术。</li><li>版本以前称为J2EE</li></ul></li><li><strong>Java ME(Java Micro Edition)小型版</strong><ul><li>支持Java程序运行在<code>移动终端（手机、机顶盒）上的平台</code>，即定位在消费性电子产品的应用开发</li><li>JavaME是JavaSE的内伸，精简了JavaSE<br>的核心类库，同时也提供自己的扩展类。增加了适合微小装置的类库：javax.microedition.io.*等。</li><li>此版本以前称为J2ME</li></ul></li></ul><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20211218093009884.png" alt="image-20211218093009884"></p><blockquote><p>注意：</p><p>Android开发不等同于Java ME的开发</p></blockquote><h2 id="7-Java开发环境搭建（掌握）"><a href="#7-Java开发环境搭建（掌握）" class="headerlink" title="7. Java开发环境搭建（掌握）"></a>7. Java开发环境搭建（掌握）</h2><h3 id="7-1-什么是JDK、JRE"><a href="#7-1-什么是JDK、JRE" class="headerlink" title="7.1 什么是JDK、JRE"></a>7.1 什么是JDK、JRE</h3><ul><li><strong>JDK</strong>  (<code>J</code>ava <code>D</code>evelopment <code>K</code>it)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</li><li>**JRE ** (<code>J</code>ava <code>R</code>untime <code>E</code>nvironment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的<code>核心类库</code>。</li></ul><p>如下是Java 8.0 Platform：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/JDKJRE.jpg"></p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310200731185.png" alt="image-20220310200731185" style="zoom:67%;" /><blockquote><p>小结：</p><p>JDK &#x3D; JRE + 开发工具集（例如Javac编译工具等）</p><p>JRE &#x3D; JVM + Java SE标准类库</p></blockquote><h3 id="7-2-JDK版本选择"><a href="#7-2-JDK版本选择" class="headerlink" title="7.2 JDK版本选择"></a>7.2 JDK版本选择</h3><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20221108221057540.png" alt="image-20221108221057540" style="zoom:80%;" /><hr><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310201541841.png" alt="image-20220310201541841"></p><ul><li>自Java 8版本发布以来，其后的每次更新，都会有小伙伴高呼：<strong>Java8 YYDS！</strong></li><li>论坛的声音：“<code>你发任你发，我用Java 8！</code>”</li></ul><p><strong>数据说话1：</strong></p><p>JRebel 于2022年4月前后发布了《2022 年Java生态系统状况报告》，报告中提到使用Java11 的占比最多，Java 8<br>紧随其后，如下图。而此前2020年的报告显示，Java8占比达到了<code>84.48%</code>。</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/d315.jpeg" alt="d315"></p><blockquote><p>我的分析：</p><p>G1是最受欢迎的GC算法。Java 11及更高版本的G1收集器是默认的GC，而Java 8中并不是。出于对G1的喜爱，很多开发者才会选择抛弃Java<br>8。</p></blockquote><p><strong>数据说话2：</strong></p><p>此外，某美国软件开发商在对近千名专业的Java开发者调研后，发布的《2022年Java开发者生产力报告》称：八年前发布的Java<br>8依然是Java中应用最广泛的版本，占比 <code>37%</code>，其次是 Java 11，占比<code>29%</code> 。</p><p><strong>高斯林说话：</strong></p><hr><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220428151952049.png" alt="image-20220428151952049" style="zoom: 67%;" /><p><strong>Spring框架说话：</strong></p><p>在Java 17正式发布之前，Java开发框架Spring率先在官博宣布，Spring Framework 6和Spring Boot 3计划在2022年第四季度实现总体可用性的高端基线：</p><ul><li><p>Java 17+(来自 Spring Framework 5.3.x 线中的 Java 8-17)</p></li><li><p>Jakarta EE 9+（来自Spring框架5.3.x 线中的 Java EE 7-8）</p></li></ul><p>Spring 官方说明：<code>https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available</code></p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220527155439683.png" alt="image-20220527155439683"></p><blockquote><p>意味着：springboot3.0 是需要用java17和spring6.0为基础建设。如果从企业选型最新springboot3.0作为架构来说，它搭配jdk17肯定是标配了。</p></blockquote><h3 id="7-3-JDK的下载"><a href="#7-3-JDK的下载" class="headerlink" title="7.3 JDK的下载"></a>7.3 JDK的下载</h3><ul><li>下载网址（Oracle公司官网）：<a href="http://www.oracle.com/">www.oracle.com</a></li><li>下载步骤：如图所示，在官网底部选择Developers开发者</li></ul><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/%E4%B8%8B%E8%BD%BD1.png" alt="1572254490435"></p><p>（1）在Developers页面中间的技术分类部分，选择<code>Java</code>，单击进入，如图所示：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20211019110551338.png" alt="image-20211019110551338" style="zoom: 50%;" /><p>（2）这里展示的是最新Java版本，例如Java17。单击<code>Download Java</code>，然后选择具体的版本下载。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20211019110843394.png" alt="image-20211019110843394" style="zoom:80%;" /><p>（3）选择Download Java按钮后</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20211019111110242.png" alt="image-20211019111110242"></p><p>（4）如果想安装Java8 可以选择如下位置：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20211019111150970.png" alt="image-20211019111150970" style="zoom:80%;" /><p>（5）选择Accept License Agreement，</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20211019111252989.png" alt="image-20211019111252989" style="zoom:80%;" /><p>（6）注册或登录后下载：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20211019111922387.png" alt="image-20211019111922387" style="zoom:50%;" /><p>（7）如果需要安装其它版本，可以选择Java archive：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220801004606762.png" alt="image-20220801004606762" style="zoom: 67%;" /><p>接着进行选择下载即可：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220801004648997.png" alt="image-20220801004648997" style="zoom:67%;" /><h3 id="7-4-JDK的安装"><a href="#7-4-JDK的安装" class="headerlink" title="7.4 JDK的安装"></a>7.4 JDK的安装</h3><ul><li>安装说明<ul><li>傻瓜式安装，下一步即可。</li><li><strong>建议：安装路径不要有中文或者空格等特殊符号。</strong></li><li><strong>本套课程会同时安装JDK8 和 JDK17，并以JDK17为默认版本进行讲解。</strong></li></ul></li></ul><ul><li>安装步骤：</li></ul><p>（1）双击<code>jdk-17_windows-x64_bin.exe</code>文件，并单击下一步，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220303083718546.png" alt="image-20220303083718546"></p><p>（2）修改安装路径，单击更改，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220303083759546.png" alt="image-20220303083759546"></p><p>（3）将安装路径修改为<code>D:\develop_tools\jdk\jdk-17.0.2\</code>，并单击下一步，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220303083845794.png" alt="image-20220303083845794"></p><p>（4）稍后几秒，安装完成，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220303083905277.png" alt="image-20220303083905277"></p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220303083931309.png" alt="image-20220303083931309"></p><h3 id="7-5-配置path环境变量"><a href="#7-5-配置path环境变量" class="headerlink" title="7.5 配置path环境变量"></a>7.5 配置path环境变量</h3><h4 id="7-5-1-理解path环境变量"><a href="#7-5-1-理解path环境变量" class="headerlink" title="7.5.1 理解path环境变量"></a>7.5.1 理解path环境变量</h4><p><strong>什么是path环境变量？</strong></p><p>答：window操作系统执行命令时，所要搜寻的路径。</p><p><strong>为什么配置path？</strong></p><p>答：希望在命令行使用javac.exe等工具时，任意目录下都可以找到这个工具所在的目录。</p><p><strong>以JDK为例演示</strong></p><p>我们在<code>C:\Users\songhk</code>目录下使用javac命令，结果如下：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310223852720.png" alt="image-20220310223852720"></p><p>我们在JDK的安装目录的bin目录下使用javac命令，结果如下：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607113708022.png" alt="image-20220607113708022" style="zoom:75%;" /><p>我们不可能每次使用java.exe，javac.exe等工具的时候都进入到JDK的安装目录下，太麻烦了。这时就需要配置path环境变量。</p><h4 id="7-5-2-JDK8配置方案1：只配置path"><a href="#7-5-2-JDK8配置方案1：只配置path" class="headerlink" title="7.5.2 JDK8配置方案1：只配置path"></a>7.5.2 JDK8配置方案1：只配置path</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>此电脑</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310224844837.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310224912273.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310224952745.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ,如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310225023208.png" alt="image-20220310225023208"></p><p>（5）点击<code>新建</code>，填入<code>D:\develop_tools\jdk\jdk1.8.0_271\bin</code>  ，并将此值<code>上移</code>到变量列表的首位。如图所示：</p><ul><li>编辑模式1：</li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607114102135.png" alt="image-20220607114102135" style="zoom:80%;" /><ul><li>编辑模式2：（注意，结尾需要有英文模式下的;）</li></ul><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220929104547925.png" alt="image-20220929104547925"></p><p>（6）环境变量配置完成，<strong>重新开启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607114432286.png" alt="image-20220607114432286" style="zoom:80%;" /><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607114517652.png" alt="image-20220607114517652" style="zoom:90%;" /><h4 id="7-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）"><a href="#7-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）" class="headerlink" title="7.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）"></a>7.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>计算机</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310224844837.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310224912273.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310224952745.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，单击<code>新建</code> ，创建新的环境变量，如图所示：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310225245208.png" alt="image-20220310225245208" style="zoom:90%;" /><p>（5）变量名输入<code>JAVA_HOME</code>，变量值输入 <code>D:\develop_tools\jdk\jdk1.8.0_271</code> ，单击<code>确定</code>，如图所示：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607114800372.png" alt="image-20220607114800372" style="zoom:80%;" /><p>（6）选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ，如图所示：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310225023208.png" alt="image-20220310225023208"></p><p>（7）在变量值的最前面，键入<code>%JAVA_HOME%\bin</code>。如图所示：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607114953758.png" alt="image-20220607114953758" style="zoom:80%;" /><blockquote><p>注意：强烈建议将%JAVA_HOME%\bin声明在path环境变量中所有变量的最前面！</p></blockquote><p>（8）环境变量配置完成，<strong>重启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607114432286.png" alt="image-20220607114432286" style="zoom:80%;" /><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607114517652.png" alt="image-20220607114517652" style="zoom:90%;" /><blockquote><p>我想说：</p><p>有的书籍、论坛、视频上还提到配置classpath，用于指名class文件识别的路径。其实是没必要的，反而建议大家如果配置了classpath环境变量，要删除。对于初学者，反而不友好。</p></blockquote><p><strong>小结如下：</strong></p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607115255562.png" alt="image-20220607115255562"></p><h4 id="7-5-4-JDK17配置方案：自动配置"><a href="#7-5-4-JDK17配置方案：自动配置" class="headerlink" title="7.5.4 JDK17配置方案：自动配置"></a>7.5.4 JDK17配置方案：自动配置</h4><p>不管大家有没有提前安装JDK8或其它版本JDK，在我们安装完JDK17之后，理应按JDK8的方式配置path环境变量。但是，我们发现在安装完JDK17以后，配置环境变量之前，执行CMD指令：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607115700870.png" alt="image-20220607115700870" style="zoom:80%;" /><p>竟然成功了！而且是17.0.2版本。因为JDK17在安装之后，自动进行了环境变量的配置。如下：</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220607115840388.png" alt="image-20220607115840388" style="zoom:80%;" /><p>这里建议，将JDK17安装的路径，设置为JAVA_HOME，并将<code>%JAVA_HOME%\bin</code>上移到首位。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20221110142710972.png" alt="image-20221110142710972" style="zoom:80%;" /><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20221110142734279.png" alt="image-20221110142734279" style="zoom:80%;" /><blockquote><p>思考：如果你仍然希望在JDK8下开发Java程序？如何做呢？</p></blockquote><h2 id="8-开发体验：HelloWorld（掌握）"><a href="#8-开发体验：HelloWorld（掌握）" class="headerlink" title="8. 开发体验：HelloWorld（掌握）"></a>8. 开发体验：HelloWorld（掌握）</h2><p>JDK安装完毕，我们就可以开发第一个Java程序了，习惯性的称为：HelloWorld。</p><h3 id="8-1-开发步骤"><a href="#8-1-开发步骤" class="headerlink" title="8.1 开发步骤"></a>8.1 开发步骤</h3><p>Java程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><ul><li>将 Java 代码<strong>编写</strong>到扩展名为 .java 的源文件中</li><li>通过 javac.exe 命令对该 java 文件进行<strong>编译</strong>，生成一个或多个字节码文件</li><li>通过 java.exe 命令对生成的 class 文件进行<strong>运行</strong></li></ul><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310230210728.png" alt="image-20220310230210728"></p><h3 id="8-2-编写"><a href="#8-2-编写" class="headerlink" title="8.2 编写"></a>8.2 编写</h3><p>（1）在<code>D:\JavaSE\chapter01</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code><br>，后缀名必须为<code>.java</code>。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220801010222222.png" alt="image-20220801010222222" style="zoom:90%;" /><p>（2）用记事本或editplus等文本编辑器打开（虽然记事本也可以，但是没有关键字颜色标识，不利于初学者学习）</p><p>（3）在文件中输入如下代码，并且保存：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloChina</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><p><strong>友情提示1：每个字母和符号必须与示例代码一模一样，包括大小写在内。</strong></p></li><li><p>友情提示2：</p></li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310230618659.png" alt="image-20220310230618659" style="zoom:67%;" /><p>或</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220521173215013.png" alt="image-20220521173215013" style="zoom:90%;" /><p>第一个<code>HelloWord</code><br>源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code><br>编译成JVM可以看懂的<code>字节码文件</code> ，也就是<code>.class</code>文件。</p><h3 id="8-3-编译"><a href="#8-3-编译" class="headerlink" title="8.3 编译"></a>8.3 编译</h3><p>在DOS命令行中，进入<code>D:\JavaSE\chapter01</code>目录，使用<code>javac</code> 命令进行编译。</p><p>使用文件资源管理器打开<code>D:\JavaSE\chapter01</code>目录，然后在地址栏输入cmd。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220801010435144.png" alt="image-20220801010435144" style="zoom:80%;" /><p>命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">javac <span class="token class-name">Java</span>源文件名<span class="token punctuation">.</span>后缀名java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>举例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">javac HelloWorld.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220801010840640.png" alt="image-20220801010840640" style="zoom:80%;" /><p>编译成功后，命令行没有任何提示。打开<code>D:\JavaSE\chapter01</code>目录，发现产生了一个新的文件 <code>HelloChina.class</code><br>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。</p><h3 id="8-4-运行"><a href="#8-4-运行" class="headerlink" title="8.4 运行"></a>8.4 运行</h3><p>在DOS命令行中，在字节码文件目录下，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">java 主类名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>主类是指包含main方法的类，main方法是Java程序的入口：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>举例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">java HelloChina<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><blockquote><p>错误演示：</p><p>java HelloChina.class</p></blockquote><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220801011104381.png" alt="image-20220801011104381" style="zoom:80%;" /><h2 id="9-Java开发工具"><a href="#9-Java开发工具" class="headerlink" title="9. Java开发工具"></a>9. Java开发工具</h2><h3 id="9-1-都有哪些开发Java的工具"><a href="#9-1-都有哪些开发Java的工具" class="headerlink" title="9.1 都有哪些开发Java的工具"></a>9.1 都有哪些开发Java的工具</h3><ul><li>级别一：文本开发工具</li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220513185907022.png" alt="image-20220513185907022" style="zoom:50%;" /><ul><li>级别二：集成开发环境（Integrated Development Environment，IDE）</li></ul><blockquote><p>把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p></blockquote><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220513190655773.png" alt="image-20220513190655773" style="zoom:50%;" /><h3 id="9-2-如何选择"><a href="#9-2-如何选择" class="headerlink" title="9.2 如何选择"></a>9.2 如何选择</h3><p>前期我们先使用文本开发工具，培养<code>代码感</code>，利于公司笔、面试。</p><p>后期我们使用IDE，提供<code>更强大的功能支持</code>。</p><h2 id="10-HelloWorld案例常见错误"><a href="#10-HelloWorld案例常见错误" class="headerlink" title="10. HelloWorld案例常见错误"></a>10. HelloWorld案例常见错误</h2><h3 id="10-1-拼写问题"><a href="#10-1-拼写问题" class="headerlink" title="10.1 拼写问题"></a>10.1 拼写问题</h3><ul><li>单词拼写问题</li><li>正确：class 错误：Class</li><li>正确：String 错误：string</li><li>正确：System 错误：system</li><li>正确：main 错误：mian</li><li>Java语言是一门严格区分大小写的语言</li><li>标点符号使用问题</li><li>不能用中文符号，英文半角的标点符号（正确）</li><li>括号问题，成对出现</li></ul><h3 id="10-2-编译、运行路径问题"><a href="#10-2-编译、运行路径问题" class="headerlink" title="10.2 编译、运行路径问题"></a>10.2 编译、运行路径问题</h3><p>举例1：</p> <img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310231657692.png" alt="image-20220310231657692" style="zoom:80%;" /><ul><li>源文件名不存在或者写错</li><li>当前路径错误</li><li>后缀名隐藏问题</li></ul><p>举例2：</p> <img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310231717893.png" alt="image-20220310231717893" style="zoom:80%;" /><ul><li>类文件名写错，尤其文件名与类名不一致时，要小心</li><li>类文件不在当前路径下，或者不在classpath指定路径下</li></ul><h3 id="10-3-语法问题"><a href="#10-3-语法问题" class="headerlink" title="10.3 语法问题"></a>10.3 语法问题</h3><p>举例1：</p> <img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310231746581.png" alt="image-20220310231746581" style="zoom:90%;" /><p>声明为public的类应与文件名一致，否知编译失败。</p><p>举例2：</p> <img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310231815405.png" alt="image-20220310231815405" style="zoom:80%;" /><p>编译失败，注意错误出现的行数，再到源代码中指定位置改错</p><h3 id="10-4-字符编码问题"><a href="#10-4-字符编码问题" class="headerlink" title="10.4 字符编码问题"></a>10.4 字符编码问题</h3><p>当cmd命令行窗口的字符编码与.java源文件的字符编码不一致，如何解决？</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BC%96%E8%AF%91%E4%B9%B1%E7%A0%81.png" alt="1557881223916"></p><p>解决方案一：</p><ul><li>xxxxxxxxxx7 1public static void main(String[] args) {2 List<Author> authors &#x3D; getAuthors();3 authors.parallelStream()4<br>.map(author -&gt; author.getAge())5 .mapToInt(age -&gt; age + 10)6 .forEach(name -&gt; System.out.println(name));7}java</li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/Notepad%E4%BF%AE%E6%94%B9%E6%BA%90%E6%96%87%E4%BB%B6%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.png" alt="1557881271819" style="zoom:80%;" /><ul><li>在EditPlus中可以将Java源文件另存为ANSI编码方式（中文操作系统下即为GBK字符集）</li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/1658810752424.png" alt="1658810752424" style="zoom:80%;" /><p>解决方案二：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">在使用javac命令式，可以指定源文件的字符编码</code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">javac -encoding utf-8 Review01.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="10-5-建议"><a href="#10-5-建议" class="headerlink" title="10.5 建议"></a>10.5 建议</h3><ul><li><p>注意缩进!</p><ul><li><p>一定要有缩进。缩进就像人得体的衣着一样！</p></li><li><p>只要遇到{}就缩进，缩进的快捷键tab键。</p></li></ul></li><li><p>必要的空格</p><ul><li>变量类型、变量、赋值符号、变量值之间填充相应空格，更美观。比如： int num &#x3D; 10;</li></ul></li></ul><h2 id="11-HelloWorld小结"><a href="#11-HelloWorld小结" class="headerlink" title="11. HelloWorld小结"></a>11. HelloWorld小结</h2><h3 id="11-1-Java程序的结构与格式"><a href="#11-1-Java程序的结构与格式" class="headerlink" title="11.1 Java程序的结构与格式"></a>11.1 Java程序的结构与格式</h3><p>结构：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">类<span class="token punctuation">&#123;</span>        方法<span class="token punctuation">&#123;</span>        语句<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>格式：</p><p>（1）每一级缩进一个Tab键</p><p>（2）{}的左半部分在行尾，右半部分单独一行，与和它成对的”{“的行首对齐</p><h3 id="11-2-Java程序的入口"><a href="#11-2-Java程序的入口" class="headerlink" title="11.2 Java程序的入口"></a>11.2 Java程序的入口</h3><p>Java程序的入口是main方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="11-3-两种常见的输出语句"><a href="#11-3-两种常见的输出语句" class="headerlink" title="11.3 两种常见的输出语句"></a>11.3 两种常见的输出语句</h3><ul><li><p><strong>换行输出语句</strong>：输出内容，完毕后进行换行，格式如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>输出内容<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p><strong>直接输出语句</strong>：输出内容，完毕后不做任何处理，格式如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>输出内容<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ul><blockquote><p>注意事项：</p><p>​ 换行输出语句，括号内可以什么都不写，只做换行处理</p><p>​ 直接输出语句，括号内什么都不写的话，编译报错</p></blockquote><h3 id="11-4-源文件名与类名"><a href="#11-4-源文件名与类名" class="headerlink" title="11.4 源文件名与类名"></a>11.4 源文件名与类名</h3><p>（1）源文件名是否必须与类名一致？public呢？</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">如果这个类不是<span class="token keyword">public</span>，那么源文件名可以和类名不一致。但是不便于代码维护。        如果这个类是<span class="token keyword">public</span>，那么要求源文件名必须与类名一致。否则编译报错。        我们建议大家，不管是否是<span class="token keyword">public</span>，都与源文件名保持一致，而且一个源文件尽量只写一个类，目的是为了好维护。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>（2）一个源文件中是否可以有多个类？public呢？</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">一个源文件中可以有多个类，编译后会生成多个<span class="token punctuation">.</span><span class="token keyword">class</span>字节码文件。        但是一个源文件只能有一个<span class="token keyword">public</span>的类。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="12-注释-comment"><a href="#12-注释-comment" class="headerlink" title="12. 注释(comment)"></a>12. 注释(comment)</h2><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220610113151774.png" alt="image-20220610113151774" style="zoom: 67%;" /><ul><li><p>什么是注释？</p><ul><li>源文件中用于解释、说明程序的文字就是注释。</li></ul></li><li><p>注释是一个程序员必须要具有的良好编程习惯。实际开发中，程序员可以先将自己的<code>思想</code>通过注释整理出来，再用<code>代码</code>去体现。</p><blockquote><p>程序员最讨厌两件事：</p><p>一件是自己写代码被要求加注释</p><p>另一件是接手别人代码，发现没有注释</p></blockquote></li><li><p>不加注释的危害</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/%E6%96%B0%E6%9D%A5%E7%9A%84%E8%8F%9C%E9%B8%9F%E7%A8%8B%E5%BA%8F%E5%91%98%E9%97%AF%E7%A5%B8%E4%BA%86%E3%80%82%E3%80%82%E3%80%82%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%E5%A5%BD%E5%A4%9A%E5%B9%B4%E9%83%BD%E6%B2%A1%E4%BA%BA%E6%95%A2%E5%8A%A8%E8%BF%87%E7%9A%84.gif"></p></li><li><p>Java中的注释类型：</p><ul><li><p>单行注释</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;注释文字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>多行注释</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 注释文字1 注释文字2注释文字3*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>文档注释 (Java特有)</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">&#x2F;**  @author  指定java程序的作者  @version  指定源文件的版本*&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li><li><p>注释的作用</p><ul><li>它提升了程序的可阅读性。（不加注释的危害性，见图。）</li><li>调试程序的重要方法。</li></ul></li><li><p><strong>具体使用1：单行注释、多行注释</strong></p><ul><li><p>对于单行和多行注释，被注释的文字，不会不会出现在字节码文件中，进而不会被JVM（java虚拟机）解释执行。</p></li><li><p>多行注释里面不允许有多行注释嵌套。</p></li><li><p>一个段子</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span>：嘿 <span class="token comment">//是什么意思啊？</span><span class="token class-name">B</span>：嘿<span class="token punctuation">.</span><span class="token class-name">A</span>：呃 我问你<span class="token comment">//是什么意思？</span><span class="token class-name">B</span>：问吧<span class="token punctuation">.</span><span class="token class-name">A</span>：我刚才不是问了么？<span class="token class-name">B</span>：啊？<span class="token class-name">A</span>：你再看看记录<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">B</span>：看完了<span class="token punctuation">.</span><span class="token class-name">A</span>：<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>所以<span class="token comment">//是啥？</span><span class="token class-name">B</span>：所以什么？<span class="token class-name">A</span>：你存心耍我呢吧？<span class="token class-name">B</span>：没有啊 你想问什么？……不断循环之后，<span class="token class-name">A</span>一气之下和<span class="token class-name">B</span>绝交，自己苦学程序。<span class="token class-name">N</span>年之后，<span class="token class-name">A</span>终于修成正果，回想起<span class="token class-name">B</span>，又把聊天记录翻出来看，这时，他突然发现<span class="token class-name">B</span>没有耍他……而他自己也不知道当年他问<span class="token class-name">B</span>的究竟是什么问题……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ul></li><li><p><strong>具体使用2：文档注释（Java特有）</strong></p><ul><li><p>文档注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></li><li><p>操作方式。比如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">javadoc -d mydoc -author -version HelloWorld.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li></ul></li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310232527578.png" alt="image-20220310232527578" style="zoom:67%;" /><p>案例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//单行注释</span><span class="token comment">/*多行注释*/</span><span class="token comment">/** 文档注释演示。这是我的第一个Java程序！^_^ @author songhk @version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     Java程序的入口     @param args main方法的命令参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="13-Java-API文档"><a href="#13-Java-API文档" class="headerlink" title="13. Java API文档"></a>13. Java API文档</h2><ul><li>API （Application Programming Interface，<strong>应用程序编程接口</strong>）是 Java 提供的基本编程接口。</li><li>Java语言提供了大量的基础类，因此 Oracle<br>也为这些基础类提供了相应的说明文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。大多数Java书籍中的类的介绍都要参照它来完成，它是编程者经常查阅的资料。</li><li>Java API文档，即为JDK使用说明书、帮助文档。类似于：</li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/%E6%96%B0%E5%8D%8E%E5%AD%97%E5%85%B8.jpg" alt="新华字典" style="zoom:28%;" /><ul><li>下载API文档：<ul><li>在线看：<a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html">https://docs.oracle.com/en/java/javase/17/docs/api/index.html</a></li><li>离线下载：<a href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html">https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html</a></li></ul></li></ul><h2 id="14-Java核心机制：JVM"><a href="#14-Java核心机制：JVM" class="headerlink" title="14. Java核心机制：JVM"></a>14. Java核心机制：JVM</h2><h3 id="14-1-Java语言的优缺点"><a href="#14-1-Java语言的优缺点" class="headerlink" title="14.1 Java语言的优缺点"></a>14.1 Java语言的优缺点</h3><p>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。“青出于蓝，而胜于蓝”。</p><h4 id="14-1-1-优点"><a href="#14-1-1-优点" class="headerlink" title="14.1.1 优点"></a>14.1.1 优点</h4><ul><li><strong>跨平台性：</strong>这是Java的核心优势。Java在最初设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。</li><li>通过Java语言编写的应用程序在不同的系统平台上都可以运行。“<code>Write once , Run Anywhere</code>”。</li><li>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (<code>J</code>VM ，Java <code>V</code>irtual <code>M</code>achine)<br>即可。由JVM来负责Java程序在该系统中的运行。</li></ul><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/JVM%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7-1666858570703.jpg" alt="JVM的跨平台性" style="zoom:70%;" /><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20211217111217831.png" alt="image-20211217111217831"></p><ul><li><p><strong>面向对象性：</strong></p><p>面向对象是一种程序设计技术，非常<code>适合大型软件的设计和开发</code><br>。面向对象编程支持封装、继承、多态等特性，让程序更好达到<code>高内聚</code>，<code>低耦合</code>的标准。</p></li><li><p><strong>健壮性：</strong>吸收了C&#x2F;C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制。</p></li><li><p><strong>安全性高：</strong></p><p>Java适合于网络&#x2F;分布式环境，需要提供一个安全机制以防恶意代码的攻击。如：<code>安全防范机制</code><br>（ClassLoader类加载器），可以分配不同的命名空间以防替代本地的同名类、字节代码检查。</p></li><li><p><strong>简单性：</strong></p><p>Java就是C++语法的<code>简化版</code>，我们也可以将Java称之为“<code>C++--</code>”。比如：头文件，指针运算，结构，联合，操作符重载，虚基类等。</p></li><li><p><strong>高性能：</strong></p><ul><li><p>Java最初发展阶段，总是被人诟病“<code>性能低</code><br>”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了<code>几十倍运行效率</code><br>。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。</p></li><li><p><code>Java低性能的短腿，已经被完全解决了</code>。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p></li></ul></li></ul><h4 id="14-1-2-缺点"><a href="#14-1-2-缺点" class="headerlink" title="14.1.2 缺点"></a>14.1.2 缺点</h4><ul><li><code>语法过于复杂、严谨</code><br>，对程序员的约束比较多，与python、php等相比入门较难。但是一旦学会了，就业岗位需求量大，而且<code>薪资待遇节节攀升</code>。</li><li>一般适用于大型网站开发，<code>整个架构会比较重</code>，对于初创公司开发和维护人员的成本比较高（即薪资高），选择用Java语言开发网站或应用系统的需要一定的经济实力。</li><li><code>并非适用于所有领域</code>。比如，Objective<br>C、Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</li></ul><h3 id="14-2-JVM功能说明"><a href="#14-2-JVM功能说明" class="headerlink" title="14.2 JVM功能说明"></a>14.2 JVM功能说明</h3><p><strong>JVM</strong>（<code>J</code>ava <code>V</code>irtual <code>M</code>achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220310165805739.png" alt="image-20220310165805739" style="zoom:67%;" /><h4 id="14-2-1-功能1：实现Java程序的跨平台性"><a href="#14-2-1-功能1：实现Java程序的跨平台性" class="headerlink" title="14.2.1 功能1：实现Java程序的跨平台性"></a>14.2.1 功能1：实现Java程序的跨平台性</h4><p>我们编写的Java代码，都运行在<strong>JVM</strong> 之上。正是因为有了JVM，才使得Java程序具备了跨平台性。</p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220513191856727.png" alt="image-20220513191856727" style="zoom:50%;" /><p>使用JVM前后对比：</p><p><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20220514151716805.png" alt="image-20220514151716805"></p><h4 id="14-2-2-功能2：自动内存管理-内存分配、内存回收"><a href="#14-2-2-功能2：自动内存管理-内存分配、内存回收" class="headerlink" title="14.2.2 功能2：自动内存管理(内存分配、内存回收)"></a>14.2.2 功能2：自动内存管理(内存分配、内存回收)</h4><ul><li>Java程序在运行过程中，涉及到运算的<code>数据的分配</code>、<code>存储</code>等都由JVM来完成</li><li>Java消除了程序员回收无用内存空间的职责。提供了一种系统级线程跟踪存储空间的分配情况，在内存空间达到相应阈值时，检查并释放可被释放的存储器空间。</li><li>GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上<code>减少了</code>因为没有释放空间而导致的<code>内存泄漏</code>。</li></ul><blockquote><p>面试题：</p><p>Java程序还会出现内存溢出和内存泄漏问题吗？ Yes!</p></blockquote><h2 id="15-企业真题"><a href="#15-企业真题" class="headerlink" title="15. 企业真题"></a>15. 企业真题</h2><ol><li>一个”.java”源文件中是否可以包括多个类?有什么限制(明*数据)</li></ol><blockquote><p>答：可以包含多个类，但是有且仅有一个类能够为public类，并且该类名要和源文件名一致。</p></blockquote><ol start="2"><li><strong>Java的优势(阿巴)</strong></li></ol><blockquote><p>Java社区比较繁荣，有大量的第三方框架配置</p></blockquote><ol start="3"><li><strong>常用的几个命令行操作都有哪些? (北京数字</strong>)</li></ol><blockquote><p>1.javac .java文件：将.java文件编译为.class文件</p><p>2.java .class文件名：运行.class文件</p></blockquote><ol start="4"><li><strong>Java中是否存在内存溢出、内存泄漏?如何解决?举例说明(拼*多)</strong></li></ol><blockquote><p>存在</p></blockquote><ol start="5"><li><em><em>如何看待Java是一门半编译半解释型的语言(携</em>)</em>*</li></ol><blockquote><p>因为java源码文件（.java）通过编译生成.class字节码文件后，可以通过解释器逐行解释运行，也可以通过JIT编译器(及时编译技术)运行。</p></blockquote><img src="https://imagebed-xuhuaiang.oss-cn-shanghai.aliyuncs.com/typora/image-20230223202619539.png" alt="image-20230223202619539" style="zoom: 80%;" />]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
